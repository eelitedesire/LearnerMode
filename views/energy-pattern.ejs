<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Carbonoz SolarAutopilot</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"> 
   <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
   <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css">
   <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
<style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap');
body {
    font-family: 'Inter', sans-serif;
}
:root {
    --primary-color: #DEAF0B;
    --bg-color: #f5f6fa;
    --text-color: #2f3640;
    --icon-color: #636e72;
    --green: #4CAF50;
    --red: #F44336;
    --blue: #2196F3;
    --amber: #FFC107;
    --gray: #757575;
   }
   
   body, html {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    height: 100%;
    background-color: var(--bg-color);
    
   }
    /* Sidebar styles */
    .sidebar {
        width: 280px;
        height: 100vh;
        background-color: white;
        border-right: 1px solid #e5e7eb;
        display: flex;
        flex-direction: column;
        position: fixed;
        top: 0;
        left: 0;
        z-index: 1000;
        transition: width 0.3s ease;
    }
   
           .logo-container {
               padding: 1.5rem;
               border-bottom: 1px solid #e5e7eb;
               display: flex;
               align-items: center;
               gap: 0.75rem;
           }
   
           .logo-icon {
    width: 50px;
    height: 50px;
    border-radius: 8px;
    display: flex;
    justify-content: center;
    align-items: center;
    color: white;
    font-weight: bold;
    font-size: 20px;
   }
   
   .logo-text {
    margin-left: 10px;
    font-weight: bold;
    color: var(--text-color);
    font-size: 18px;
   }
   
   .logo-text .highlight {
    color: var(--primary-color);
    margin-left: 10px;
   }
   
   
   nav {
    flex-grow: 1;
   }
   
   nav ul {
    list-style-type: none;
    padding: 0;
    margin: 0;
   }
   nav li {
    padding: 15px 20px;
    display: flex;
    align-items: center;
    color: var(--text-color);
    cursor: pointer;
    transition: background-color 0.3s;
    font-size: 18px;
   }
   
   nav li a{
    text-decoration: none;
    color: #2f3640;
    font-weight: bold;
   }
   nav li:hover {
    background-color: var(--bg-color);
   }
   
   nav li i {
    margin-right: 15px;
    color: var(--icon-color);
    font-size: 24px;
   }
   
   .bottom-options {
    padding: 20px;
    border-top: 1px solid #dcdde1;
   }
   
   .toggle-sidebar {
    display: flex;
    align-items: center;
    justify-content: space-between;
    cursor: pointer;
    font-size: 16px;
   }
   
   .toggle-text {
    margin-right: 10px;
   }
   
   .toggle-switch {
    width: 50px;
    height: 25px;
    background-color: #dcdde1;
    border-radius: 12.5px;
    position: relative;
    transition: background-color 0.3s;
   }
   .toggle-switch::before {
    content: '';
    position: absolute;
    width: 21px;
    height: 21px;
    border-radius: 50%;
    background-color: white;
    top: 2px;
    left: 2px;
    transition: transform 0.3s;
   }
   
   .toggle-switch.active {
    background-color: var(--primary-color);
   }
   
   .toggle-switch.active::before {
    transform: translateX(25px);
   }
   
   .sidebar.collapsed .logo-text,
   .sidebar.collapsed .search,
   .sidebar.collapsed nav li span,
   .sidebar.collapsed .toggle-text {
    display: none;
   }
   
   .sidebar.collapsed .logo {
    justify-content: center;
   }
   
   .sidebar.collapsed nav li {
    justify-content: center;
   }
   
   .sidebar.collapsed nav li i {
    margin-right: 0;
   }
           /* Main content styles */
           .main-content {
               flex: 1;
               margin-left: 280px;
               padding: 2rem;
           }
   
           .content-header {
               margin-bottom: 2rem;
           }
   
           .content-header h2 {
               font-size: 1.875rem;
               font-weight: 700;
               color: #111827;
           }
   
           .metrics-grid {
               display: grid;
               grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
               gap: 1.5rem;
               margin-bottom: 2rem;
           }
   
           .metric-card {
               background: white;
               border-radius: 12px;
               padding: 1.5rem;
               box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
           }
   
           .metric-title {
               font-size: 0.875rem;
               font-weight: 600;
               color: #4b5563;
               margin-bottom: 0.5rem;
           }
   
           .metric-value {
               font-size: 1.5rem;
               font-weight: 700;
               margin-bottom: 0.25rem;
           }
   
           .metric-subtitle {
               font-size: 0.875rem;
               color: #6b7280;
           }
   
           .chart-container {
               background: white;
               border-radius: 12px;
               padding: 1.5rem;
               margin-bottom: 2rem;
               box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
           }
   
           .chart-wrapper {
               height: 400px;
               margin-top: 1rem;
           }
   
           .period-buttons {
               display: flex;
               gap: 0.75rem;
               margin-bottom: 1rem;
           }
   
           .period-btn {
               padding: 0.5rem 1rem;
               border: none;
               background-color: #e5e7eb;
               color: #4b5563;
               border-radius: 6px;
               cursor: pointer;
               font-weight: 500;
               transition: all 0.2s;
           }
   
           .period-btn:hover {
               background-color: #d1d5db;
           }
   
           .period-btn.active {
               background-color: #DEAF0B;
               color: white;
           }
   
           /* Toggle styles */
           .toggle {
               position: relative;
               display: inline-block;
               width: 44px;
               height: 24px;
           }
   
           .toggle input {
               opacity: 0;
               width: 0;
               height: 0;
           }
   
           .slider {
               position: absolute;
               cursor: pointer;
               top: 0;
               left: 0;
               right: 0;
               bottom: 0;
               background-color: #e5e7eb;
               transition: .4s;
               border-radius: 34px;
           }
   
           .slider:before {
               position: absolute;
               content: "";
               height: 16px;
               width: 16px;
               left: 4px;
               bottom: 4px;
               background-color: white;
               transition: .4s;
               border-radius: 50%;
           }
   
           input:checked + .slider {
               background-color: #DEAF0B;
           }
   
           input:checked + .slider:before {
               transform: translateX(20px);
           }
   
           /* Updated and new styles */
           .bottom-controls {
               padding: 1.5rem;
               border-top: 1px solid #e5e7eb;
           }
   
           .control-item {
               display: flex;
               justify-content: space-between;
               align-items: center;
               margin-bottom: 1rem;
           }
   
           .control-label {
               font-size: 0.875rem;
               color: #4b5563;
           }
   
           .toggle {
               position: relative;
               display: inline-block;
               width: 44px;
               height: 24px;
           }
   
           .toggle input {
               opacity: 0;
               width: 0;
               height: 0;
           }
   
           .sidebar {
    width: 280px;
    background-color: white;
    box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
    display: flex;
    flex-direction: column;
    transition: width 0.3s ease;
    z-index: 10;
   }
   
   .sidebar.collapsed {
    width: 80px;
   }
   
   .logo {
    display: flex;
    align-items: center;
    padding: 20px;
   }
   
   
           input:checked + .slider {
               background-color: #DEAF0B;
           }
   
           input:checked + .slider:before {
               transform: translateX(20px);
           }
   
           .total-emissions {
               font-size: 1.25rem;
               font-weight: 600;
               margin-bottom: 1rem;
               color: #374151;
           }
   
           .summary-grid {
               display: grid;
               grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
               gap: 1rem;
               margin-bottom: 2rem;
           }
   
           .summary-item {
               background-color: white;
               border-radius: 8px;
               padding: 1rem;
               box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
           }
   
           .summary-label {
               font-size: 0.875rem;
               color: #6b7280;
               display: block;
               margin-bottom: 0.5rem;
           }
   
           .summary-value {
               font-size: 1.25rem;
               font-weight: 600;
           }
   
       
   
           /* Responsive styles */
           @media (max-width: 768px) {
               .sidebar {
                   width: 100%;
                   height: auto;
                   position: static;
                   border-right: none;
                   border-bottom: 1px solid #e5e7eb;
               }
   
               .main-content {
                   margin-left: 0;
               }
   
               body.collapsed-sidebar .sidebar {
                   display: none;
               }
   
               body.collapsed-sidebar .main-content {
                   margin-left: 0;
               }
   
               .metrics-grid,
               .summary-grid {
                   grid-template-columns: 1fr;
               }
   
               .period-buttons {
                   flex-wrap: wrap;
               }
   
               .period-btn {
                   flex: 1 0 calc(50% - 0.375rem);
                   margin-bottom: 0.75rem;
               }
           }

/* loading css */

.loading-overlay {
 position: fixed;
 top: 0;
 left: 0;
 width: 100%;
 height: 100%;
 background-color: #f8f9fa;
 display: flex;
 justify-content: center;
 align-items: center;
 z-index: 9999;
}

.loading-spinner {
 width: 60px;
 height: 60px;
 border: 5px solid #e0e0e0;
 border-top: 5px solid #3498db;
 border-radius: 50%;
 animation: spin 1s linear infinite;
}

@keyframes spin {
 0% { transform: rotate(0deg); }
 100% { transform: rotate(360deg); }
}

.dashboard-column {
flex-basis: calc(33.33333% - 2px);
margin-right: 2px;
margin-bottom: 2px;
}

@media only screen and (max-width: 128em) {
.dashboard-column {
 flex-basis: calc(50% - 2px);
}
}

@media only screen and (max-width: 62em) {
.dashboard-column {
 flex-basis: calc(100% - 2px);
}
}

.dashboard-column .card {
border: 0;
}

.dashboard-column .card .iframe-moving {
display: block;
height: 100%;
min-height: 33em;
position: relative;
width: 100%;
}

@media only screen and (max-width: 46em) {
.dashboard-column .card .iframe-moving {
 min-height: 107em;
}
}
.dashboard-column .card .iframe-overview {
display: block;
height: 100%;
min-height: 22em;
width: 100%;
}

@media only screen and (max-width: 46em) {
.dashboard-column .card .iframe-overview {
 min-height: 18em;
}
}

.dashboard-column .card .iframe-battery-power {
display: block;
height: 60%;
min-height: 18em;
width: 100%;
}

@media only screen and (max-width: 46em) {
.dashboard-column .card .iframe-battery-power {
 min-height: 15em;
}
}

.dashboard-column .card .iframe-battery-soc {
display: block;
height: 40%;
min-height: 14em;
width: 100%;
}

@media only screen and (max-width: 46em) {
.dashboard-column .card .iframe-battery-soc {
 min-height: 12em;
}
}

/* Dark mode styles */
body.dark-mode {
    background-color: rgba(24, 27, 31, 1);
 color: #f5f6fa;
}

.dark-mode .main-content{
    background-color: rgba(24, 27, 31, 1);
    color: #f5f6fa;
}

.dark-mode .sidebar {
    background-color: rgba(24, 27, 31, 1);
}

.dark-mode .sidebar .logo-icon {
 color: #2f3640;
}

.dark-mode .sidebar .logo-text {
 color: #f5f6fa;
}

.dark-mode .sidebar nav li {
 color: #f5f6fa;
}

.dark-mode .sidebar nav li:hover {
 background-color: #383838;
}

.dark-mode .sidebar nav li a {
 color: #f5f6fa;
}

.dark-mode .sidebar nav li i {
 color: #dcdde1;
}

.dark-mode .toggle-sidebar,
.dark-mode .toggle-dark-mode {
 color: #f5f6fa;
}

.dark-mode .toggle-switch {
    background-color: var(--primary-color);
}

.dark-mode .toggle-switch.active {
 background-color: var(--primary-color);
}

.dark-mode header {
    background-color: rgb(17, 18, 23);
}

.dark-mode .content-card {
    background-color: rgba(24, 27, 31, 1);
 color: #fff;
}


.dark-mode .loading-overlay{
    background-color: rgba(24, 27, 31, 1);
}

/* Mobile Sidebar Improvements */
@media (max-width: 768px) {
    /* Sidebar base styles */
    .sidebar {
        position: fixed;
        top: 0;
        left: 0;
        height: 100vh;
        width: 280px;
        transform: translateX(-100%);
        transition: transform 0.3s ease-in-out;
        z-index: 1000;
        overflow-y: auto;
        -webkit-overflow-scrolling: touch;
        box-shadow: none;
    }

    .sidebar.active {
        transform: translateX(0);
        box-shadow: 2px 0 12px rgba(0, 0, 0, 0.15);
    }

    /* Improved hamburger button */
    .mobile-toggle {
        display: block;
        position: fixed;
        top: 1rem;
        left: 1rem;
        z-index: 1001;
        background: none;
        border: none;
        cursor: pointer;
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: white;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        padding: 8px;
    }

    .mobile-toggle span {
        display: block;
        width: 24px;
        height: 2px;
        background-color: var(--text-color);
        margin: 5px auto;
        transition: transform 0.3s ease, opacity 0.3s ease;
    }

    .mobile-toggle.active span:nth-child(1) {
        transform: translateY(7px) rotate(45deg);
    }

    .mobile-toggle.active span:nth-child(2) {
        opacity: 0;
    }

    .mobile-toggle.active span:nth-child(3) {
        transform: translateY(-7px) rotate(-45deg);
    }

    /* Improved nav items */
    .sidebar nav ul {
        padding: 1rem 0;
    }

    .sidebar nav li {
        padding: 0.875rem 1.5rem;
        margin: 0.25rem 1rem;
        border-radius: 8px;
        transition: background-color 0.2s ease;
    }

    .sidebar nav li a {
        display: flex;
        align-items: center;
        gap: 1rem;
        font-size: 1rem;
        color: var(--text-color);
    }

    .sidebar nav li i {
        font-size: 1.25rem;
        min-width: 24px;
        text-align: center;
    }

    .sidebar nav li:active {
        background-color: rgba(0, 0, 0, 0.05);
    }

    /* Improved overlay */
    .sidebar-overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.4);
        backdrop-filter: blur(2px);
        z-index: 999;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .sidebar-overlay.active {
        display: block;
        opacity: 1;
    }

    /* Dark mode adjustments */
    .dark-mode .mobile-toggle {
        background-color: rgba(255, 255, 255, 0.1);
    }

    .dark-mode .mobile-toggle span {
        background-color: #f5f6fa;
    }

    .dark-mode .sidebar nav li:active {
        background-color: rgba(255, 255, 255, 0.05);
    }
}

/* Ensure main content adjusts properly */
@media (max-width: 768px) {
    .main-content {
        margin-left: 0;
        padding-top: 4.5rem;
        transition: margin-left 0.3s ease;
    }

    body.sidebar-open .main-content {
        filter: blur(2px);
        pointer-events: none;
    }
}


  /* Main content styling */
.main-content {
  flex: 1;
  margin-left: 280px;
  padding: 2rem;
  background-color: var(--bg-color);
  color: var(--text-color);
  transition: margin-left 0.3s ease;
}

.main-content .container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0;
}

.card {
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
            border-radius: 8px;
            border: none;
        }
        .card-header {
            background-color: #DEAF0B;
            border-bottom: 1px solid #e3f2fd;
            border-radius: 8px 8px 0 0 !important;
            color: #fff;
        }
        .card-header button{
            color: #fff;
        }
        .change-item {
            cursor: pointer;
            padding: 15px;
            border-bottom: 1px solid #eee;
            transition: background-color 0.2s;
        }
        .change-item:hover {
            background-color: #f8f9fa;
        }
        .change-item:last-child {
            border-bottom: none;
        }
        .change-value {
            font-weight: 500;
        }
        .inverter-heading {
            background-color: #DEAF0B;
            padding: 10px 15px;
            font-weight: 600;
            margin-top: 15px;
            border-radius: 5px;
            color: #fff;
        }
        .modal-header {
            background-color: #f1f8ff;
        }
        .timestamp {
            font-size: 0.85rem;
            color: #6c757d;
        }
        .setting-title {
            font-weight: 600;
            font-size: 1.1rem;
        }
        .edit-icon {
            color: #007bff;
            opacity: 0.7;
        }
        .change-item:hover .edit-icon {
            opacity: 1;
        }
        .nav-link.active {
            font-weight: bold;
            color: #DEAF0B !important;
        }
        .changes-list {
            max-height: 500px;
            overflow-y: auto;
        }
        .pattern-card {
            cursor: pointer;
            transition: transform 0.2s, box-shadow 0.2s;
        }
        .pattern-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);
        }
        .pattern-card.active {
            border: 2px solid #DEAF0B;
        }
        .pattern-icon {
            font-size: 2rem;
            margin-bottom: 10px;
        }
        .pattern-option {
            margin-bottom: 15px;
        }
        .system-stat {
            padding: 10px;
            border-radius: 5px;
            margin-bottom: 10px;
            background-color: #f8f9fa;
        }
.badge {
    background-color: #DEAF0B;
}

/* Enhanced responsive styles for main content */
.main-content {
  padding: 2rem;
  transition: margin-left 0.3s ease, background-color 0.3s ease, color 0.3s ease;
}

@media (max-width: 992px) {
  .main-content {
    padding: 1.5rem;
  }
  
  .card-header {
    flex-direction: column;
    align-items: flex-start !important;
  }
  
  .card-header div {
    margin-top: 0.75rem;
    width: 100%;
    display: flex;
    justify-content: space-between;
  }
}

@media (max-width: 768px) {
  .main-content {
    padding: 1rem;
    margin-left: 0 !important;
  }
  
  .d-flex.flex-wrap.justify-content-center.gap-3 {
    justify-content: flex-start;
    overflow-x: auto;
    flex-wrap: nowrap !important;
    padding: 0.5rem;
    gap: 0.5rem !important;
  }
  
  .d-flex.flex-wrap.justify-content-center.gap-3 .nav-link {
    white-space: nowrap;
    padding: 0.5rem 0.75rem;
    font-size: 0.9rem;
  }
  
  .card-header h5 {
    font-size: 1.1rem;
  }
  
  .pattern-option {
    min-width: 100%;
  }
}

@media (max-width: 576px) {
  .main-content {
    padding: 0.75rem;
  }
  
  .changes-list {
    max-height: 300px;
  }
  
  .card-header {
    padding: 0.75rem;
  }
  
  .card-header button {
    padding: 0.4rem 0.6rem;
    font-size: 0.85rem;
  }
  
  .card-body {
    padding: 0.75rem;
  }
  
  .inverter-heading {
    font-size: 0.95rem;
  }
}

/* Dark mode styles for main content */
.dark-mode .main-content {
  background-color: rgba(24, 27, 31, 1);
  color: #f5f6fa;
}

.dark-mode .d-flex.flex-wrap.justify-content-center.gap-3 {
  background-color: rgba(18, 21, 25, 0.8) !important;
}

.dark-mode .nav-link {
  color: #dcdde1;
}

.dark-mode .nav-link.active {
  color: var(--primary-color) !important;
}

.dark-mode .card {
  background-color: rgba(32, 35, 41, 1);
  border-color: rgba(52, 58, 64, 0.5);
}

.dark-mode .card-header {
  background-color: rgba(32, 35, 41, 0.9);
  border-color: rgba(52, 58, 64, 0.8);
}

.dark-mode .change-item {
  border-color: rgba(52, 58, 64, 0.8);
}

.dark-mode .change-item:hover {
  background-color: rgba(40, 44, 52, 1);
}

.dark-mode .alert-info {
  background-color: rgba(0, 123, 255, 0.2);
  color: #8ecaff;
  border-color: rgba(0, 123, 255, 0.3);
}

.dark-mode .alert-warning {
  background-color: rgba(255, 193, 7, 0.2);
  color: #ffe083;
  border-color: rgba(255, 193, 7, 0.3);
}

.dark-mode .alert-danger {
  background-color: rgba(220, 53, 69, 0.2);
  color: #ff8b96;
  border-color: rgba(220, 53, 69, 0.3);
}

.dark-mode .alert-success {
  background-color: rgba(40, 167, 69, 0.2);
  color: #8bd8a0;
  border-color: rgba(40, 167, 69, 0.3);
}

.dark-mode .inverter-heading {
  background-color: rgba(222, 175, 11, 0.8);
}

.dark-mode .system-stat {
  background-color: rgba(36, 40, 47, 1);
}

.dark-mode .pattern-card {
  background-color: rgba(36, 40, 47, 1);
  border-color: rgba(52, 58, 64, 0.8);
}

.dark-mode .pattern-card:hover {
  background-color: rgba(44, 49, 58, 1);
  box-shadow: 0 8px 15px rgba(0, 0, 0, 0.2);
}

.dark-mode .pattern-card.active {
  border-color: var(--primary-color);
  background-color: rgba(48, 52, 63, 1);
}

.dark-mode .text-muted,
.dark-mode .small.text-muted {
  color: #adb5bd !important;
}

.dark-mode .modal-content {
  background-color: rgba(32, 35, 41, 1);
  border-color: rgba(52, 58, 64, 0.8);
}

.dark-mode .modal-header {
  background-color: rgba(36, 40, 47, 1);
  border-color: rgba(52, 58, 64, 0.8);
}

.dark-mode .table {
  color: #f5f6fa;
}

.dark-mode .table-striped tbody tr:nth-of-type(odd) {
  background-color: rgba(40, 44, 52, 0.5);
}

.dark-mode .form-select,
.dark-mode .input-group-text {
  background-color: rgba(36, 40, 47, 1);
  border-color: rgba(52, 58, 64, 0.8);
  color: #f5f6fa;
}

/* Loading overlay in dark mode */
.dark-mode .loading-overlay {
  background-color: rgba(24, 27, 31, 0.8);
}

.dark-mode .loading-spinner {
  border-color: #333;
  border-top-color: var(--primary-color);
}

/* Custom styles for better visualization in both modes */
.pattern-card {
  height: 100%;
  display: flex;
  flex-direction: column;
}

.pattern-card .card-body {
  display: flex;
  flex-direction: column;
  height: 100%;
}

.pattern-card .card-text {
  flex-grow: 1;
}

.changes-list::-webkit-scrollbar {
  width: 8px;
}

.changes-list::-webkit-scrollbar-track {
  background: transparent;
}

.changes-list::-webkit-scrollbar-thumb {
  background-color: rgba(150, 150, 150, 0.5);
  border-radius: 4px;
}

.dark-mode .changes-list::-webkit-scrollbar-thumb {
  background-color: rgba(80, 80, 80, 0.5);
}

/* Responsive support for pattern cards */
@media (min-width: 577px) and (max-width: 992px) {
  .pattern-option {
    min-width: 50%;
  }
}

/* Better support for tables in dark mode */
.dark-mode .table-responsive {
  border-color: rgba(52, 58, 64, 0.8);
}

.dark-mode tbody, 
.dark-mode td, 
.dark-mode tfoot, 
.dark-mode th, 
.dark-mode thead, 
.dark-mode tr {
  border-color: rgba(52, 58, 64, 0.8);
}

/* Enhance focus states for dark mode */
.dark-mode .form-select:focus,
.dark-mode .form-control:focus {
  border-color: var(--primary-color);
  box-shadow: 0 0 0 0.25rem rgba(222, 175, 11, 0.25);
  background-color: rgba(40, 44, 52, 1);
}

/* Improve navigation tabs scrolling */
.d-flex.flex-wrap.justify-content-center.gap-3::-webkit-scrollbar {
  height: 4px;
}

.d-flex.flex-wrap.justify-content-center.gap-3::-webkit-scrollbar-track {
  background: transparent;
}

.d-flex.flex-wrap.justify-content-center.gap-3::-webkit-scrollbar-thumb {
  background-color: rgba(150, 150, 150, 0.5);
  border-radius: 4px;
}
</style>
</head>
<body>
      <!-- Add hamburger menu button -->
      <button class="mobile-toggle" id="mobileToggle">
        <span></span>
        <span></span>
        <span></span>
    </button>
    <div class="container">
        <div id="loadingOverlay" class="loading-overlay">
            <div class="loading-spinner"></div>
          </div>
          <div id="pageContent"> </div>

          <div class="sidebar" id="sidebar">
            <div class="logo">
              <div class="logo-icon">
                <img src="https://carbonoz.com/assets/images/image04.jpg?v=8b5d1d9b" width="45px" alt="">
              </div>
              <a href="https://carbonoz.com/" target="_blank" style="text-decoration: none;">
                <span class="logo-text">CARBONOZ <span class="highlight">SolarAutopilot</span></span>
              </a>
            </div>
          
            <nav>
              <ul>
                <li><a href="/"><i>🏠</i><span>Dashboard</span></a></li>
                <li><a href="/chart"><i>📊</i><span>Charts</span></a></li>
                <li><a href="/messages"><i>💬</i><span>Messages</span></a></li>
                <li><a href="/settings"><i>⚙️</i><span>Settings</span></a></li>
                <li><a href="/analytics"><i>📈</i><span>Analytics</span></a></li>
                <li><a href="/learner"><i>🧠</i><span>Learner Mode</span></a></li>
                <li><a href="/results"><i>🌱</i><span>Carbon Intensity</span></a></li>
              </ul>
            </nav>
            
            <div class="bottom-options">
              <div class="toggle-dark-mode" id="toggleDarkMode">
                <span class="toggle-text">Dark Mode</span>
                <div class="toggle-switch" id="darkModeSwitch"></div>
              </div>
            </div>
          </div>
          
     

          <div class="main-content">
            <div class="d-flex flex-wrap justify-content-center gap-3 p-2 bg-light rounded shadow-sm">
                <a class="nav-link text-nowrap" href="/learner">
                    <i class="fas fa-brain me-1" style="color: #6C757D;"></i>Learner
                </a>
                <a class="nav-link text-nowrap" href="/grid-charge">
                    <i class="fas fa-plug me-1" style="color: #007BFF;"></i>Grid Charge
                </a>
                <a class="nav-link active text-nowrap" href="/energy-pattern">
                    <i class="fas fa-battery-three-quarters me-1" style="color: #28A745;"></i>Energy Pattern
                </a>
                <a class="nav-link text-nowrap" href="/voltage-point">
                    <i class="fas fa-bolt me-1" style="color: #DC3545;"></i>Voltage Points
                </a>
                <a class="nav-link text-nowrap" href="/work-mode">
                    <i class="fas fa-cogs me-1" style="color: #FFC107;"></i>Work Mode
                </a>
                <a class="nav-link text-nowrap" href="/battery-charging">
                    <i class="fas fa-charging-station me-1" style="color: #17A2B8;"></i>Battery Charging
                </a>
               
               
              

            </div>
            
            <br>
            <div class="container">
                <!-- Alerts container -->
                <div id="alerts-container"></div>
        
                <div class="row mb-4">
                    <div class="col-lg-8">
                        <div class="card mb-4">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h5 class="mb-0"><i class="fas fa-battery-three-quarters me-2"></i>Energy Pattern</h5>
                                <div>
                                    <button class="btn me-2" id="view-history-btn">
                                        <i class="fas fa-history me-1"></i> View History
                                    </button>
                                    <button class="btn" id="refresh-patterns">
                                        <i class="fas fa-sync-alt me-1"></i> Refresh
                                    </button>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="alert alert-info">
                                    <i class="fas fa-info-circle me-2"></i>
                                    Energy pattern controls how your system prioritizes different energy sources. Choose the pattern that best fits your current needs.
                                </div>
                                
                                <div id="inverters-container">
                                    <!-- Inverters will be loaded here -->
                                    <div class="text-center py-4">
                                        <div class="spinner-border text-primary" role="status"></div>
                                        <div class="mt-2">Loading inverters...</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-lg-4">                
                        <div class="card mt-4">
                            <div class="card-header">
                                <h5 class="mb-0"><i class="fas fa-history me-2"></i>Recent Changes</h5>
                            </div>
                            <div class="card-body p-0">
                                <div class="changes-list" id="recent-changes">
                                    <div class="text-center py-4">
                                        <div class="spinner-border text-primary" role="status"></div>
                                        <div class="mt-2">Loading recent changes...</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        
            <!-- Energy Pattern History Modal -->
            <div class="modal fade" id="patternHistoryModal" tabindex="-1" aria-labelledby="patternHistoryModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="patternHistoryModalLabel">Energy Pattern Change History</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <div class="input-group">
                                        <span class="input-group-text">Filter by Inverter</span>
                                        <select class="form-select" id="history-inverter-filter">
                                            <option value="all">All Inverters</option>
                                            <!-- Inverter options will be added dynamically -->
                                        </select>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="input-group">
                                        <span class="input-group-text">Time Range</span>
                                        <select class="form-select" id="history-time-range">
                                            <option value="24">Last 24 Hours</option>
                                            <option value="48">Last 48 Hours</option>
                                            <option value="168" selected>Last 7 Days</option>
                                            <option value="720">Last 30 Days</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="table-responsive">
                                <table class="table table-striped">
                                    <thead>
                                        <tr>
                                            <th>Date & Time</th>
                                            <th>Inverter</th>
                                            <th>Old Pattern</th>
                                            <th>New Pattern</th>
                                        </tr>
                                    </thead>
                                    <tbody id="pattern-history-list">
                                        <tr>
                                            <td colspan="5" class="text-center py-4">
                                                <div class="spinner-border text-primary" role="status"></div>
                                                <div class="mt-2">Loading history...</div>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    <!-- JavaScript Libraries -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
    
    <script>
        // Global variables
        let inverters = [];
        let currentPatterns = {};
        let systemState = {};
        
        // Pattern descriptions for tooltips
        const patternDescriptions = {
    'Battery first': '',
    'Load first': ''
};

        
        // Pattern icons and colors
        const patternIcons = {
            'Battery first': 'fa-battery-full',
            'Load first': 'fa-plug',
        };
        
        const patternColors = {
            'Battery first': '#28a745',
            'Load first': '#dc3545',
        };
        
        // Initialize the page
        $(document).ready(function() {
            // Load current patterns and system state
            loadCurrentPatterns();
            
            // Load recent changes
            loadRecentChanges();
            
            // Set up event listeners
            setupEventListeners();
        });
        
        // Setup event listeners
        function setupEventListeners() {
            // Refresh button
            $('#refresh-patterns').click(function() {
                loadCurrentPatterns();
                showAlert('info', 'Energy patterns refreshed');
            });
            
            // View history button
            $('#view-history-btn').click(function() {
                loadPatternHistory();
                const historyModal = new bootstrap.Modal(document.getElementById('patternHistoryModal'));
                historyModal.show();
            });
            
            // History filter change
            $('#history-inverter-filter, #history-time-range').change(function() {
                loadPatternHistory();
            });
        }
   
    // Load current patterns from the API
    function loadCurrentPatterns() {
    // First try the current-settings endpoint (preferred)
    $.ajax({
        url: '/api/current-settings',
        method: 'GET',
        success: function(response) {
            console.log("Current settings response:", response);
            
            if (response && response.currentSettings && response.currentSettings.energy_pattern) {
                // Process inverters and their patterns
                const inverterCount = response.inverterCount || 1;
                inverters = [];
                currentPatterns = {};
                
                // Create inverter list
                for (let i = 1; i <= inverterCount; i++) {
                    const inverterId = `inverter_${i}`;
                    inverters.push(inverterId);
                    
                    // Extract current pattern if available
                    const currentPattern = response.currentSettings.energy_pattern[inverterId] || 'Unknown';
                    currentPatterns[inverterId] = currentPattern;
                }
                
                // Render the inverters and their patterns
                renderInverters();
            } else {
                // Fallback to the energy-pattern-changes endpoint
                loadCurrentPatternsFromHistory();
            }
        },
        error: function(xhr, status, error) {
            console.error('Error loading current patterns from settings:', status, error);
            // Fallback to the energy-pattern-changes endpoint
            loadCurrentPatternsFromHistory();
        }
    });
}

function loadCurrentPatternsFromHistory() {
    $.ajax({
        url: '/api/energy-pattern-changes',
        method: 'GET',
        success: function(response) {
            console.log("Energy pattern changes response:", response);
            
            if (Array.isArray(response) && response.length > 0) {
                // Group changes by inverter to find the most recent for each
                const latestByInverter = {};
                
                // Process each change
                response.forEach(change => {
                    // Extract inverter ID from the topic
                    const topicParts = change.topic.split('/');
                    let inverterId = null;
                    
                    for (const part of topicParts) {
                        if (part.startsWith('inverter_')) {
                            inverterId = part;
                            break;
                        }
                    }
                    
                    if (!inverterId) return; // Skip if no inverter ID found
                    
                    // Keep track of the most recent change for each inverter
                    if (!latestByInverter[inverterId] || 
                        new Date(change.timestamp) > new Date(latestByInverter[inverterId].timestamp)) {
                        latestByInverter[inverterId] = change;
                    }
                });
                
                // Now we have the most recent change for each inverter
                inverters = Object.keys(latestByInverter);
                currentPatterns = {};
                
                // Extract the current patterns
                inverters.forEach(inverterId => {
                    currentPatterns[inverterId] = latestByInverter[inverterId].new_value || 'Unknown';
                });
                
                // If no inverters were found in the history, create at least one
                if (inverters.length === 0) {
                    inverters = ['inverter_1'];
                    currentPatterns['inverter_1'] = 'Unknown';
                }
                
                // Render the inverters and their patterns
                renderInverters();
            } else {
                $('#inverters-container').html('<div class="alert alert-warning">No energy patterns found in history</div>');
                
                // Create a default inverter anyway
                inverters = ['inverter_1'];
                currentPatterns['inverter_1'] = 'Unknown';
                renderInverters();
            }
        },
        error: function(xhr, status, error) {
            console.error('Error loading current patterns from history:', status, error);
            showAlert('danger', 'Error connecting to server');
            $('#inverters-container').html('<div class="alert alert-danger">Server connection error</div>');
            
            // Create a default inverter anyway
            inverters = ['inverter_1'];
            currentPatterns['inverter_1'] = 'Unknown';
            renderInverters();
        }
    });
}

        // Render the inverters and their patterns
        function renderInverters() {
            let html = '';
            
            if (inverters.length === 0) {
                html = '<div class="alert alert-warning">No inverters detected</div>';
            } else {
                // For each inverter
                inverters.forEach((inverterId, index) => {
                    const inverterNumber = index + 1;
                    const currentPattern = currentPatterns[inverterId] || 'Unknown';
                    
                    html += `
                        <div class="mb-4">
                            <div class="inverter-heading mb-3">
                                <i class="fas fa-microchip me-2"></i>Inverter ${inverterNumber}
                                <span class="badge ms-2">
                                    Current: ${currentPattern}
                                </span>
                            </div>
                            
                            <div class="row" id="patterns-${inverterId}">
                                <!-- Pattern options -->
                                ${renderPatternOptions(inverterId, currentPattern)}
                            </div>
                        </div>
                    `;
                });
            }
            
            $('#inverters-container').html(html);
            
            // Add click handlers to pattern cards
            $('.pattern-card').click(function() {
                const inverterId = $(this).data('inverter');
                const pattern = $(this).data('pattern');
                
                // Set the new pattern
                setEnergyPattern(inverterId, pattern);
            });
            
            // Initialize tooltips
            $('[data-bs-toggle="tooltip"]').tooltip();
        }
        
        // Render pattern options for an inverter
        function renderPatternOptions(inverterId, currentPattern) {
            const patterns = [
                'Battery first',
                'Load first'
            ];
            
            let html = '';
            
            patterns.forEach(pattern => {
                const isActive = pattern === currentPattern;
                const icon = patternIcons[pattern] || 'fa-question';
                const color = patternColors[pattern] || '#6c757d';
                const description = patternDescriptions[pattern] || 'No description available';
                
                html += `
                    <div class="col-md-4 col-sm-6 pattern-option">
                        <div class="card pattern-card ${isActive ? 'active' : ''}" 
                             data-inverter="${inverterId}" 
                             data-pattern="${pattern}"
                             data-bs-toggle="tooltip"
                             data-bs-placement="top"
                             title="${description}">
                            <div class="card-body text-center">
                                <i class="fas ${icon} pattern-icon" style="color: ${color};"></i>
                                <h5 class="card-title">${pattern}</h5>
                                <p class="card-text small">${description.substring(0, 60)}${description.length > 60 ? '...' : ''}</p>
                                ${isActive ? 
                                    '<div class="mt-2 badge bg-success">Current Setting</div>' : 
                                    '<div class="mt-2 text-muted small">Click to select</div>'
                                }
                            </div>
                        </div>
                    </div>
                `;
            });
            
            return html;
        }
        
        // Set energy pattern
        function setEnergyPattern(inverterId, pattern) {
            $.ajax({
                url: '/api/command',
                method: 'POST',
                data: {
                    topic: `energy/${inverterId}/energy_pattern/set`,
                    value: pattern
                },
                success: function(response) {
                    if (response.success) {
                        // Update local data
                        currentPatterns[inverterId] = pattern;
                        
                        // Update UI
                        $(`#patterns-${inverterId} .pattern-card`).removeClass('active');
                        $(`#patterns-${inverterId} .pattern-card[data-pattern="${pattern}"]`).addClass('active');
                        
                        // Update the badge
                        $(`.inverter-heading:contains("Inverter ${inverterId.split('_')[1]}") .badge`).text(`Current: ${pattern}`);
                        
                        // Show success message
                        showAlert('success', `Energy pattern for Inverter ${inverterId.split('_')[1]} set to ${pattern}`);
                        
                        // Refresh data after a short delay
                        setTimeout(() => {
                            loadRecentChanges();
                        }, 2000);
                    } else {
                        showAlert('danger', `Failed to set energy pattern: ${response.message || 'Unknown error'}`);
                    }
                },
                error: function(error) {
                    console.error('Error setting energy pattern:', error);
                    showAlert('danger', `Error setting energy pattern: ${error.responseJSON?.error || 'Server error'}`);
                }
            });
        }
        
        // Load recent changes
        function loadRecentChanges() {
            $.ajax({
                url: '/api/energy-pattern-changes',
                method: 'GET',
                success: function(response) {
                    displayRecentChanges(response);
                },
                error: function() {
                    $('#recent-changes').html('<div class="alert alert-warning m-3">Failed to load recent changes</div>');
                }
            });
        }
        
        // Display recent changes
function displayRecentChanges(changes) {
    console.log("Recent changes data:", changes);
    
    if (!changes || (Array.isArray(changes) && changes.length === 0)) {
        $('#recent-changes').html('<div class="text-center p-3">No recent changes found</div>');
        return;
    }
    
    // Ensure changes is an array
    const changesArray = Array.isArray(changes) ? changes : [changes];
    
    // Sort changes by timestamp (newest first)
    changesArray.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
    
    // Take only the 10 most recent changes
    const recentChanges = changesArray.slice(0, 10);
    
    let html = '';
    
    recentChanges.forEach(change => {
        const timestamp = moment(change.timestamp).format('MM/DD HH:mm');
        const topicParts = change.topic ? change.topic.split('/') : [];
        
        // Extract inverter from topic
        let inverter = 'unknown';
        for (const part of topicParts) {
            if (part.includes('inverter_')) {
                inverter = part;
                break;
            }
        }
        
        const inverterDisplay = inverter !== 'unknown' ? 
            `Inverter ${inverter.replace('inverter_', '')}` : 
            'Unknown';
        
        const oldValue = change.old_value || '-';
        const newValue = change.new_value || '-';
        
        // Determine color based on pattern
        const newPatternColor = patternColors[newValue] || '#6c757d';
        
        html += `
            <div class="change-item">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <div class="fw-bold">${inverterDisplay}</div>
                        <div class="small text-muted">${timestamp}</div>
                    </div>
                    <div class="text-end">
                        <div class="d-flex align-items-center">
                            <span class="me-2">${oldValue}</span>
                            <i class="fas fa-arrow-right text-muted mx-1"></i>
                            <span class="badge" style="background-color: ${newPatternColor}">${newValue}</span>
                        </div>

                    </div>
                </div>
            </div>
        `;
    });
    
    $('#recent-changes').html(html);
}
        // Load pattern history
        function loadPatternHistory() {
            // Get filter values
            const inverterFilter = $('#history-inverter-filter').val();
            const timeRange = $('#history-time-range').val();
            
            // Show loading spinner
            $('#pattern-history-list').html(`
                <tr>
                    <td colspan="5" class="text-center py-4">
                        <div class="spinner-border text-primary" role="status"></div>
                        <div class="mt-2">Loading history...</div>
                    </td>
                </tr>
            `);
            
            // Make API request
            $.ajax({
                url: '/api/energy-pattern-changes',
                method: 'GET',
                data: {
                    hours: timeRange,
                    inverter: inverterFilter === 'all' ? null : inverterFilter
                },
                success: function(response) {
                    displayPatternHistory(response, inverterFilter);
                },
                error: function() {
                    $('#pattern-history-list').html('<tr><td colspan="5" class="text-center">Failed to load history</td></tr>');
                }
            });
        }
        
        // Display pattern history
        function displayPatternHistory(changes, inverterFilter) {
            if (!changes || changes.length === 0) {
                $('#pattern-history-list').html('<tr><td colspan="5" class="text-center">No history found</td></tr>');
                return;
            }
            
            // Sort changes by timestamp (newest first)
            changes.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
            
            // Filter by inverter if needed
            if (inverterFilter && inverterFilter !== 'all') {
                changes = changes.filter(change => change.topic.includes(inverterFilter));
            }
            
            let html = '';
            
            changes.forEach(change => {
                const timestamp = moment(change.timestamp).format('MM/DD/YYYY HH:mm:ss');
                const topicParts = change.topic.split('/');
                
                // Extract inverter from topic
                let inverter = 'unknown';
                for (const part of topicParts) {
                    if (part.includes('inverter_')) {
                        inverter = part;
                        break;
                    }
                }
                
                const inverterDisplay = inverter !== 'unknown' ? 
                    `Inverter ${inverter.replace('inverter_', '')}` : 
                    'Unknown';
                
                const oldValue = change.old_value || '-';
                const newValue = change.new_value || '-';

                
                html += `
                    <tr>
                        <td>${timestamp}</td>
                        <td>${inverterDisplay}</td>
                        <td><span class="badge bg-secondary">${oldValue}</span></td>
                        <td><span class="badge" style="background-color: ${patternColors[newValue] || '#6c757d'}">${newValue}</span></td>
                    </tr>
                `;
            });
            
            $('#pattern-history-list').html(html);
            
            // Update filter options if needed
            if ($('#history-inverter-filter option').length <= 1) {
                // Add inverter options to filter dropdown
                let inverterOptions = '<option value="all">All Inverters</option>';
                inverters.forEach((inverterId, index) => {
                    inverterOptions += `<option value="${inverterId}">Inverter ${index + 1}</option>`;
                });
                $('#history-inverter-filter').html(inverterOptions);
            }
        }
        
        function showAlert(type, message, autoHide = true) {
            const alertId = 'alert-' + Date.now();
            const alertHtml = `
                <div id="${alertId}" class="alert alert-${type} alert-dismissible fade show" role="alert">
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            `;
            
            // Insert at the top of the alerts container
            $('#alerts-container').prepend(alertHtml);
            
            // Automatically remove alert after 5 seconds if autoHide is true
            if (autoHide) {
                setTimeout(() => {
                    $(`#${alertId}`).alert('close');
                }, 5000);
            }
        }
    </script>
       
      
<script>
       // loading js
        
   document.addEventListener('DOMContentLoaded', function() {
    const loadingOverlay = document.getElementById('loadingOverlay');
    const pageContent = document.getElementById('pageContent');
  
    // Simulate loading time (you can adjust this as needed)
    setTimeout(() => {
      loadingOverlay.style.display = 'none';
      pageContent.style.display = 'block';
      // Trigger a custom event to signal that the page is ready
      document.dispatchEvent(new Event('pageReady'));
    }, 1500); // 1.5 seconds loading time
  });
</script>

</body>
</html>

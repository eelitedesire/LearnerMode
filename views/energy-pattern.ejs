<!-- energy-pattern.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Energy System - Energy Pattern Settings</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        body {
            background-color: #f8f9fa;
        }
        .card {
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
            border-radius: 8px;
            border: none;
        }
        .card-header {
            background-color: #f1f8ff;
            border-bottom: 1px solid #e3f2fd;
            border-radius: 8px 8px 0 0 !important;
        }
        .change-item {
            cursor: pointer;
            padding: 15px;
            border-bottom: 1px solid #eee;
            transition: background-color 0.2s;
        }
        .change-item:hover {
            background-color: #f8f9fa;
        }
        .change-item:last-child {
            border-bottom: none;
        }
        .change-value {
            font-weight: 500;
        }
        .inverter-heading {
            background-color: #e9ecef;
            padding: 10px 15px;
            font-weight: 600;
            margin-top: 15px;
            border-radius: 5px;
        }
        .modal-header {
            background-color: #f1f8ff;
        }
        .timestamp {
            font-size: 0.85rem;
            color: #6c757d;
        }
        .setting-title {
            font-weight: 600;
            font-size: 1.1rem;
        }
        .edit-icon {
            color: #007bff;
            opacity: 0.7;
        }
        .change-item:hover .edit-icon {
            opacity: 1;
        }
        .nav-link.active {
            font-weight: bold;
            color: #007bff !important;
        }
        .changes-list {
            max-height: 500px;
            overflow-y: auto;
        }
        .pattern-card {
            cursor: pointer;
            transition: transform 0.2s, box-shadow 0.2s;
        }
        .pattern-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);
        }
        .pattern-card.active {
            border: 2px solid #007bff;
        }
        .pattern-icon {
            font-size: 2rem;
            margin-bottom: 10px;
        }
        .pattern-option {
            margin-bottom: 15px;
        }
        .system-stat {
            padding: 10px;
            border-radius: 5px;
            margin-bottom: 10px;
            background-color: #f8f9fa;
        }
    </style>
</head>
<body>
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary mb-4">
        <div class="container">
            <a class="navbar-brand" href="/"><i class="fas fa-solar-panel me-2"></i>Energy System Monitor</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link" href="/"><i class="fas fa-home me-1"></i>Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/grid-charge"><i class="fas fa-plug me-1"></i>Grid Charge</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link active" href="/energy-pattern"><i class="fas fa-battery-three-quarters me-1"></i>Energy Pattern</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/work-mode"><i class="fas fa-cogs me-1"></i>Work Mode</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/battery-charging"><i class="fas fa-charging-station me-1"></i>Battery Charging</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/voltage-point"><i class="fas fa-bolt me-1"></i>Voltage Points</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/rules"><i class="fas fa-tasks me-1"></i>Rules</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/learner"><i class="fas fa-brain me-1"></i>Learner</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container">
        <!-- Alerts container -->
        <div id="alerts-container"></div>

        <div class="row mb-4">
            <div class="col-lg-8">
                <div class="card mb-4">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0"><i class="fas fa-battery-three-quarters me-2"></i>Energy Pattern</h5>
                        <div>
                            <button class="btn btn-outline-primary me-2" id="view-history-btn">
                                <i class="fas fa-history me-1"></i> View History
                            </button>
                            <button class="btn btn-primary" id="refresh-patterns">
                                <i class="fas fa-sync-alt me-1"></i> Refresh
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle me-2"></i>
                            Energy pattern controls how your system prioritizes different energy sources. Choose the pattern that best fits your current needs.
                        </div>
                        
                        <div id="inverters-container">
                            <!-- Inverters will be loaded here -->
                            <div class="text-center py-4">
                                <div class="spinner-border text-primary" role="status"></div>
                                <div class="mt-2">Loading inverters...</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="col-lg-4">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0"><i class="fas fa-info-circle me-2"></i>System Status</h5>
                    </div>
                    <div class="card-body">
                        <div class="system-stat">
                            <div class="d-flex justify-content-between align-items-center">
                                <span><i class="fas fa-battery-half me-2"></i>Battery SoC:</span>
                                <span id="battery-soc" class="text-primary fw-bold">--</span>
                            </div>
                        </div>
                        
                        <div class="system-stat">
                            <div class="d-flex justify-content-between align-items-center">
                                <span><i class="fas fa-solar-panel me-2"></i>PV Power:</span>
                                <span id="pv-power" class="text-success fw-bold">--</span>
                            </div>
                        </div>
                        
                        <div class="system-stat">
                            <div class="d-flex justify-content-between align-items-center">
                                <span><i class="fas fa-plug me-2"></i>Load Power:</span>
                                <span id="load-power" class="text-warning fw-bold">--</span>
                            </div>
                        </div>
                        
                        <p class="text-muted mt-3 small">
                            <i class="fas fa-clock me-1"></i> Last updated: <span id="last-updated">--</span>
                        </p>
                    </div>
                </div>
                
                <div class="card mt-4">
                    <div class="card-header">
                        <h5 class="mb-0"><i class="fas fa-history me-2"></i>Recent Changes</h5>
                    </div>
                    <div class="card-body p-0">
                        <div class="changes-list" id="recent-changes">
                            <div class="text-center py-4">
                                <div class="spinner-border text-primary" role="status"></div>
                                <div class="mt-2">Loading recent changes...</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Energy Pattern History Modal -->
    <div class="modal fade" id="patternHistoryModal" tabindex="-1" aria-labelledby="patternHistoryModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="patternHistoryModalLabel">Energy Pattern Change History</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <div class="input-group">
                                <span class="input-group-text">Filter by Inverter</span>
                                <select class="form-select" id="history-inverter-filter">
                                    <option value="all">All Inverters</option>
                                    <!-- Inverter options will be added dynamically -->
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="input-group">
                                <span class="input-group-text">Time Range</span>
                                <select class="form-select" id="history-time-range">
                                    <option value="24">Last 24 Hours</option>
                                    <option value="48">Last 48 Hours</option>
                                    <option value="168" selected>Last 7 Days</option>
                                    <option value="720">Last 30 Days</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    
                    <div class="table-responsive">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Date & Time</th>
                                    <th>Inverter</th>
                                    <th>Old Pattern</th>
                                    <th>New Pattern</th>
                                    <th>Battery SoC</th>
                                </tr>
                            </thead>
                            <tbody id="pattern-history-list">
                                <tr>
                                    <td colspan="5" class="text-center py-4">
                                        <div class="spinner-border text-primary" role="status"></div>
                                        <div class="mt-2">Loading history...</div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- JavaScript Libraries -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
    
    <script>
        // Global variables
        let inverters = [];
        let currentPatterns = {};
        let systemState = {};
        
        // Pattern descriptions for tooltips
        const patternDescriptions = {
    'Battery first': '',
    'Load first': ''
};

        
        // Pattern icons and colors
        const patternIcons = {
            'Battery first': 'fa-battery-full',
            'Load first': 'fa-plug',
        };
        
        const patternColors = {
            'Battery first': '#28a745',
            'Load first': '#dc3545',
        };
        
        // Initialize the page
        $(document).ready(function() {
            // Load current patterns and system state
            loadCurrentPatterns();
            
            // Load system state
            loadSystemState();
            
            // Load recent changes
            loadRecentChanges();
            
            // Set up event listeners
            setupEventListeners();
            
            // Refresh data every 30 seconds
            setInterval(function() {
                loadSystemState();
            }, 30000);
        });
        
        // Setup event listeners
        function setupEventListeners() {
            // Refresh button
            $('#refresh-patterns').click(function() {
                loadCurrentPatterns();
                loadSystemState();
                showAlert('info', 'Energy patterns refreshed');
            });
            
            // View history button
            $('#view-history-btn').click(function() {
                loadPatternHistory();
                const historyModal = new bootstrap.Modal(document.getElementById('patternHistoryModal'));
                historyModal.show();
            });
            
            // History filter change
            $('#history-inverter-filter, #history-time-range').change(function() {
                loadPatternHistory();
            });
        }
   
    // Load current patterns from the API
    function loadCurrentPatterns() {
    // First try the current-settings endpoint (preferred)
    $.ajax({
        url: '/api/current-settings',
        method: 'GET',
        success: function(response) {
            console.log("Current settings response:", response);
            
            if (response && response.currentSettings && response.currentSettings.energy_pattern) {
                // Process inverters and their patterns
                const inverterCount = response.inverterCount || 1;
                inverters = [];
                currentPatterns = {};
                
                // Create inverter list
                for (let i = 1; i <= inverterCount; i++) {
                    const inverterId = `inverter_${i}`;
                    inverters.push(inverterId);
                    
                    // Extract current pattern if available
                    const currentPattern = response.currentSettings.energy_pattern[inverterId] || 'Unknown';
                    currentPatterns[inverterId] = currentPattern;
                }
                
                // Render the inverters and their patterns
                renderInverters();
            } else {
                // Fallback to the energy-pattern-changes endpoint
                loadCurrentPatternsFromHistory();
            }
        },
        error: function(xhr, status, error) {
            console.error('Error loading current patterns from settings:', status, error);
            // Fallback to the energy-pattern-changes endpoint
            loadCurrentPatternsFromHistory();
        }
    });
}

function loadCurrentPatternsFromHistory() {
    $.ajax({
        url: '/api/energy-pattern-changes',
        method: 'GET',
        success: function(response) {
            console.log("Energy pattern changes response:", response);
            
            if (Array.isArray(response) && response.length > 0) {
                // Group changes by inverter to find the most recent for each
                const latestByInverter = {};
                
                // Process each change
                response.forEach(change => {
                    // Extract inverter ID from the topic
                    const topicParts = change.topic.split('/');
                    let inverterId = null;
                    
                    for (const part of topicParts) {
                        if (part.startsWith('inverter_')) {
                            inverterId = part;
                            break;
                        }
                    }
                    
                    if (!inverterId) return; // Skip if no inverter ID found
                    
                    // Keep track of the most recent change for each inverter
                    if (!latestByInverter[inverterId] || 
                        new Date(change.timestamp) > new Date(latestByInverter[inverterId].timestamp)) {
                        latestByInverter[inverterId] = change;
                    }
                });
                
                // Now we have the most recent change for each inverter
                inverters = Object.keys(latestByInverter);
                currentPatterns = {};
                
                // Extract the current patterns
                inverters.forEach(inverterId => {
                    currentPatterns[inverterId] = latestByInverter[inverterId].new_value || 'Unknown';
                });
                
                // If no inverters were found in the history, create at least one
                if (inverters.length === 0) {
                    inverters = ['inverter_1'];
                    currentPatterns['inverter_1'] = 'Unknown';
                }
                
                // Render the inverters and their patterns
                renderInverters();
            } else {
                $('#inverters-container').html('<div class="alert alert-warning">No energy patterns found in history</div>');
                
                // Create a default inverter anyway
                inverters = ['inverter_1'];
                currentPatterns['inverter_1'] = 'Unknown';
                renderInverters();
            }
        },
        error: function(xhr, status, error) {
            console.error('Error loading current patterns from history:', status, error);
            showAlert('danger', 'Error connecting to server');
            $('#inverters-container').html('<div class="alert alert-danger">Server connection error</div>');
            
            // Create a default inverter anyway
            inverters = ['inverter_1'];
            currentPatterns['inverter_1'] = 'Unknown';
            renderInverters();
        }
    });
}
      // Load system state
function loadSystemState() {
    $.ajax({
        url: '/api/system-state',
        method: 'GET',
        success: function(response) {
            console.log("System state response:", response); // Add debugging
            if (response && response.current_state) {
                systemState = response.current_state;
                
                // Update UI with system state
                $('#battery-soc').text(systemState.battery_soc !== null ? systemState.battery_soc + '%' : '--');
                $('#pv-power').text(systemState.pv_power !== null ? systemState.pv_power + 'W' : '--');
                $('#load-power').text(systemState.load !== null ? systemState.load + 'W' : '--');
                $('#last-updated').text(moment(systemState.timestamp).format('MM/DD HH:mm:ss'));
                
                // Update battery icon based on SOC
                updateBatteryIcon(systemState.battery_soc);
            } else {
                console.error("Invalid system state response structure:", response);
            }
        },
        error: function(xhr, status, error) {
            console.error('Error loading system state:', status, error);
            showAlert('warning', 'Unable to load system status data');
        }
    });
}
            $.ajax({
                url: '/api/system-state',
                method: 'GET',
                success: function(response) {
                    if (response && response.current_state) {
                        systemState = response.current_state;
                        
                        // Update UI with system state
                        $('#battery-soc').text(systemState.battery_soc !== null ? systemState.battery_soc + '%' : '--');
                        $('#pv-power').text(systemState.pv_power !== null ? systemState.pv_power + 'W' : '--');
                        $('#load-power').text(systemState.load !== null ? systemState.load + 'W' : '--');
                        $('#last-updated').text(moment(systemState.timestamp).format('MM/DD HH:mm:ss'));
                        
                        // Update battery icon based on SOC
                        updateBatteryIcon(systemState.battery_soc);
                    }
                },
                error: function(xhr, status, error) {
                    console.error('Error loading system state:', status, error);
                }
            });
        
        // Update battery icon based on state of charge
        function updateBatteryIcon(soc) {
            let iconClass = 'fa-battery-empty';
            
            if (soc === null || soc === undefined) {
                // No data
                iconClass = 'fa-battery-empty';
            } else if (soc >= 90) {
                iconClass = 'fa-battery-full';
            } else if (soc >= 70) {
                iconClass = 'fa-battery-three-quarters';
            } else if (soc >= 40) {
                iconClass = 'fa-battery-half';
            } else if (soc >= 10) {
                iconClass = 'fa-battery-quarter';
            }
            
            // Update the icon
            $('#battery-soc').prev().find('i').removeClass().addClass(`fas ${iconClass} me-2`);
        }
        
        // Render the inverters and their patterns
        function renderInverters() {
            let html = '';
            
            if (inverters.length === 0) {
                html = '<div class="alert alert-warning">No inverters detected</div>';
            } else {
                // For each inverter
                inverters.forEach((inverterId, index) => {
                    const inverterNumber = index + 1;
                    const currentPattern = currentPatterns[inverterId] || 'Unknown';
                    
                    html += `
                        <div class="mb-4">
                            <div class="inverter-heading mb-3">
                                <i class="fas fa-microchip me-2"></i>Inverter ${inverterNumber}
                                <span class="badge bg-primary ms-2">
                                    Current: ${currentPattern}
                                </span>
                            </div>
                            
                            <div class="row" id="patterns-${inverterId}">
                                <!-- Pattern options -->
                                ${renderPatternOptions(inverterId, currentPattern)}
                            </div>
                        </div>
                    `;
                });
            }
            
            $('#inverters-container').html(html);
            
            // Add click handlers to pattern cards
            $('.pattern-card').click(function() {
                const inverterId = $(this).data('inverter');
                const pattern = $(this).data('pattern');
                
                // Set the new pattern
                setEnergyPattern(inverterId, pattern);
            });
            
            // Initialize tooltips
            $('[data-bs-toggle="tooltip"]').tooltip();
        }
        
        // Render pattern options for an inverter
        function renderPatternOptions(inverterId, currentPattern) {
            const patterns = [
                'Battery first',
                'Load first'
            ];
            
            let html = '';
            
            patterns.forEach(pattern => {
                const isActive = pattern === currentPattern;
                const icon = patternIcons[pattern] || 'fa-question';
                const color = patternColors[pattern] || '#6c757d';
                const description = patternDescriptions[pattern] || 'No description available';
                
                html += `
                    <div class="col-md-4 col-sm-6 pattern-option">
                        <div class="card pattern-card ${isActive ? 'active' : ''}" 
                             data-inverter="${inverterId}" 
                             data-pattern="${pattern}"
                             data-bs-toggle="tooltip"
                             data-bs-placement="top"
                             title="${description}">
                            <div class="card-body text-center">
                                <i class="fas ${icon} pattern-icon" style="color: ${color};"></i>
                                <h5 class="card-title">${pattern}</h5>
                                <p class="card-text small">${description.substring(0, 60)}${description.length > 60 ? '...' : ''}</p>
                                ${isActive ? 
                                    '<div class="mt-2 badge bg-success">Current Setting</div>' : 
                                    '<div class="mt-2 text-muted small">Click to select</div>'
                                }
                            </div>
                        </div>
                    </div>
                `;
            });
            
            return html;
        }
        
        // Set energy pattern
        function setEnergyPattern(inverterId, pattern) {
            $.ajax({
                url: '/api/command',
                method: 'POST',
                data: {
                    topic: `energy/${inverterId}/energy_pattern/set`,
                    value: pattern
                },
                success: function(response) {
                    if (response.success) {
                        // Update local data
                        currentPatterns[inverterId] = pattern;
                        
                        // Update UI
                        $(`#patterns-${inverterId} .pattern-card`).removeClass('active');
                        $(`#patterns-${inverterId} .pattern-card[data-pattern="${pattern}"]`).addClass('active');
                        
                        // Update the badge
                        $(`.inverter-heading:contains("Inverter ${inverterId.split('_')[1]}") .badge`).text(`Current: ${pattern}`);
                        
                        // Show success message
                        showAlert('success', `Energy pattern for Inverter ${inverterId.split('_')[1]} set to ${pattern}`);
                        
                        // Refresh data after a short delay
                        setTimeout(() => {
                            loadRecentChanges();
                            loadSystemState();
                        }, 2000);
                    } else {
                        showAlert('danger', `Failed to set energy pattern: ${response.message || 'Unknown error'}`);
                    }
                },
                error: function(error) {
                    console.error('Error setting energy pattern:', error);
                    showAlert('danger', `Error setting energy pattern: ${error.responseJSON?.error || 'Server error'}`);
                }
            });
        }
        
        // Load recent changes
        function loadRecentChanges() {
            $.ajax({
                url: '/api/energy-pattern-changes',
                method: 'GET',
                success: function(response) {
                    displayRecentChanges(response);
                },
                error: function() {
                    $('#recent-changes').html('<div class="alert alert-warning m-3">Failed to load recent changes</div>');
                }
            });
        }
        
        // Display recent changes
function displayRecentChanges(changes) {
    console.log("Recent changes data:", changes);
    
    if (!changes || (Array.isArray(changes) && changes.length === 0)) {
        $('#recent-changes').html('<div class="text-center p-3">No recent changes found</div>');
        return;
    }
    
    // Ensure changes is an array
    const changesArray = Array.isArray(changes) ? changes : [changes];
    
    // Sort changes by timestamp (newest first)
    changesArray.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
    
    // Take only the 10 most recent changes
    const recentChanges = changesArray.slice(0, 10);
    
    let html = '';
    
    recentChanges.forEach(change => {
        const timestamp = moment(change.timestamp).format('MM/DD HH:mm');
        const topicParts = change.topic ? change.topic.split('/') : [];
        
        // Extract inverter from topic
        let inverter = 'unknown';
        for (const part of topicParts) {
            if (part.includes('inverter_')) {
                inverter = part;
                break;
            }
        }
        
        const inverterDisplay = inverter !== 'unknown' ? 
            `Inverter ${inverter.replace('inverter_', '')}` : 
            'Unknown';
        
        const oldValue = change.old_value || '-';
        const newValue = change.new_value || '-';
        
        // Determine color based on pattern
        const newPatternColor = patternColors[newValue] || '#6c757d';
        
        html += `
            <div class="change-item">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <div class="fw-bold">${inverterDisplay}</div>
                        <div class="small text-muted">${timestamp}</div>
                    </div>
                    <div class="text-end">
                        <div class="d-flex align-items-center">
                            <span class="me-2">${oldValue}</span>
                            <i class="fas fa-arrow-right text-muted mx-1"></i>
                            <span class="badge" style="background-color: ${newPatternColor}">${newValue}</span>
                        </div>
                        <div class="small text-muted mt-1">
                            Battery: ${change.system_state?.battery_soc || '-'}%
                        </div>
                    </div>
                </div>
            </div>
        `;
    });
    
    $('#recent-changes').html(html);
}
        // Load pattern history
        function loadPatternHistory() {
            // Get filter values
            const inverterFilter = $('#history-inverter-filter').val();
            const timeRange = $('#history-time-range').val();
            
            // Show loading spinner
            $('#pattern-history-list').html(`
                <tr>
                    <td colspan="5" class="text-center py-4">
                        <div class="spinner-border text-primary" role="status"></div>
                        <div class="mt-2">Loading history...</div>
                    </td>
                </tr>
            `);
            
            // Make API request
            $.ajax({
                url: '/api/energy-pattern-changes',
                method: 'GET',
                data: {
                    hours: timeRange,
                    inverter: inverterFilter === 'all' ? null : inverterFilter
                },
                success: function(response) {
                    displayPatternHistory(response, inverterFilter);
                },
                error: function() {
                    $('#pattern-history-list').html('<tr><td colspan="5" class="text-center">Failed to load history</td></tr>');
                }
            });
        }
        
        // Display pattern history
        function displayPatternHistory(changes, inverterFilter) {
            if (!changes || changes.length === 0) {
                $('#pattern-history-list').html('<tr><td colspan="5" class="text-center">No history found</td></tr>');
                return;
            }
            
            // Sort changes by timestamp (newest first)
            changes.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
            
            // Filter by inverter if needed
            if (inverterFilter && inverterFilter !== 'all') {
                changes = changes.filter(change => change.topic.includes(inverterFilter));
            }
            
            let html = '';
            
            changes.forEach(change => {
                const timestamp = moment(change.timestamp).format('MM/DD/YYYY HH:mm:ss');
                const topicParts = change.topic.split('/');
                
                // Extract inverter from topic
                let inverter = 'unknown';
                for (const part of topicParts) {
                    if (part.includes('inverter_')) {
                        inverter = part;
                        break;
                    }
                }
                
                const inverterDisplay = inverter !== 'unknown' ? 
                    `Inverter ${inverter.replace('inverter_', '')}` : 
                    'Unknown';
                
                const oldValue = change.old_value || '-';
                const newValue = change.new_value || '-';
                const batterySoc = change.system_state?.battery_soc || '-';
                
                html += `
                    <tr>
                        <td>${timestamp}</td>
                        <td>${inverterDisplay}</td>
                        <td><span class="badge bg-secondary">${oldValue}</span></td>
                        <td><span class="badge" style="background-color: ${patternColors[newValue] || '#6c757d'}">${newValue}</span></td>
                        <td>${batterySoc}%</td>
                    </tr>
                `;
            });
            
            $('#pattern-history-list').html(html);
            
            // Update filter options if needed
            if ($('#history-inverter-filter option').length <= 1) {
                // Add inverter options to filter dropdown
                let inverterOptions = '<option value="all">All Inverters</option>';
                inverters.forEach((inverterId, index) => {
                    inverterOptions += `<option value="${inverterId}">Inverter ${index + 1}</option>`;
                });
                $('#history-inverter-filter').html(inverterOptions);
            }
        }
        
        function showAlert(type, message, autoHide = true) {
            const alertId = 'alert-' + Date.now();
            const alertHtml = `
                <div id="${alertId}" class="alert alert-${type} alert-dismissible fade show" role="alert">
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            `;
            
            // Insert at the top of the alerts container
            $('#alerts-container').prepend(alertHtml);
            
            // Automatically remove alert after 5 seconds if autoHide is true
            if (autoHide) {
                setTimeout(() => {
                    $(`#${alertId}`).alert('close');
                }, 5000);
            }
        }
    </script>
</body>
</html>

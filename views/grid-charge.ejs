<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Grid Charge Monitoring</title>
  <link rel="stylesheet" href="/css/styles.css">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    /* Base styles and reset */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  line-height: 1.6;
  color: #333;
  background-color: #f5f7fa;
  padding: 20px;
}

.container {
  max-width: 1200px;
  margin: 0 auto;
  background-color: #fff;
  border-radius: 10px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  padding: 30px;
}

h1 {
  color: #2c3e50;
  margin-bottom: 30px;
  font-size: 28px;
  font-weight: 600;
  text-align: center;
  border-bottom: 2px solid #eaedf0;
  padding-bottom: 15px;
}

h2 {
  color: #3498db;
  margin: 25px 0 15px;
  font-size: 22px;
  font-weight: 500;
}

/* Status panel styles */
.status-panel {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background-color: #f8fafc;
  border-radius: 8px;
  padding: 20px;
  margin-bottom: 30px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
}

.status-panel p {
  font-size: 16px;
  font-weight: 500;
}

#status {
  font-weight: 700;
  padding: 5px 12px;
  border-radius: 20px;
  display: inline-block;
  text-transform: uppercase;
  font-size: 14px;
}

#status.active {
  background-color: #2ecc71;
  color: white;
}

#status.inactive {
  background-color: #e74c3c;
  color: white;
}

#changesCount {
  font-weight: 700;
  color: #3498db;
  font-size: 18px;
}

/* Grid changes list styles */
.grid-changes-container {
  background-color: #fff;
  border-radius: 8px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
  margin-bottom: 30px;
  overflow: hidden;
}

.grid-changes-container h2 {
  padding: 15px 20px;
  margin: 0;
  background-color: #DEAF0B;
  color: white;
}

.changes-list {
  max-height: 600px;
  overflow-y: auto;
}

.change-item {
  display: grid;
  grid-template-columns: 1fr 2fr 1fr;
  padding: 15px 20px;
  border-bottom: 1px solid #eaedf0;
  transition: background-color 0.2s;
}

.change-item:hover {
  background-color: #f8fafc;
}

.change-item:last-child {
  border-bottom: none;
}

.change-time {
  color: #7f8c8d;
  font-size: 14px;
}

.change-details {
  padding: 0 15px;
}

.change-topic {
  font-weight: 600;
  margin-bottom: 5px;
  color: #2c3e50;
}

.change-value {
  display: flex;
  align-items: center;
  gap: 10px;
  font-size: 15px;
}

.old-value {
  text-decoration: line-through;
  color: #e74c3c;
}

.arrow {
  color: #7f8c8d;
}

.new-value {
  color: #2ecc71;
  font-weight: 500;
}

.system-state {
  display: flex;
  flex-direction: column;
  gap: 5px;
  color: #7f8c8d;
  font-size: 14px;
}

.no-data {
  padding: 30px;
  text-align: center;
  color: #7f8c8d;
  font-style: italic;
}

/* Responsive design */
@media (max-width: 768px) {
  .container {
    padding: 15px;
  }
  
  .status-panel {
    flex-direction: column;
    align-items: flex-start;
    gap: 10px;
  }
  
  .change-item {
    grid-template-columns: 1fr;
    grid-template-rows: auto auto auto;
    gap: 10px;
  }
  
  .system-state {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    margin-top: 10px;
  }
}

@media (max-width: 480px) {
  .system-state {
    grid-template-columns: 1fr;
  }
}

/* Hide chart container since it's not needed */
.chart-container {
  display: none;
}
  </style>
</head>
<body>
  <div class="container">
    <h1>Grid Charge Setting Changes</h1>
    
    <div class="status-panel">
      <p>Monitoring Status: <span id="status" class="<%= active ? 'active' : 'inactive' %>"><%= active ? 'ACTIVE' : 'INACTIVE' %></span></p>
      <p>Total Grid Charge Changes: <span id="changesCount"><%= changes_count %></span></p>
    </div>
    
    <div class="grid-changes-container">
      <h2>Recent Grid Charge Changes</h2>
      <div id="gridChanges" class="changes-list"></div>
    </div>
    
    <div class="chart-container">
      <h2>Grid Charge Activity</h2>
      <canvas id="gridChargeChart"></canvas>
    </div>
  </div>

  <script>
    // Fetch grid charge changes
    async function fetchGridChargeChanges() {
      try {
        const response = await fetch('/api/grid-charge-changes');
        const data = await response.json();
        
        displayGridChargeChanges(data);
        createGridChargeChart(data);
      } catch (error) {
        console.error('Error fetching grid charge changes:', error);
      }
    }
    
    // Display grid charge changes in the UI
    function displayGridChargeChanges(changes) {
      const container = document.getElementById('gridChanges');
      container.innerHTML = '';
      
      if (changes.length === 0) {
        container.innerHTML = '<p class="no-data">No grid charge changes detected yet.</p>';
        return;
      }
      
      // Sort by most recent first
      changes.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
      
      // Take only the 10 most recent changes
      const recentChanges = changes.slice(0, 10);
      
      recentChanges.forEach(change => {
        const changeElement = document.createElement('div');
        changeElement.className = 'change-item';
        
        changeElement.innerHTML = `
          <div class="change-time">${change.timestamp}</div>
          <div class="change-details">
            <div class="change-topic">${change.topic}</div>
            <div class="change-value">
              <span class="old-value">${change.old_value}</span>
              <span class="arrow">â†’</span>
              <span class="new-value">${change.new_value}</span>
            </div>
          </div>
          <div class="system-state">
            <div>SOC: ${change.system_state.battery_soc}%</div>
            <div>PV: ${change.system_state.pv_power}W</div>
            <div>Load: ${change.system_state.load}W</div>
          </div>
        `;
        
        container.appendChild(changeElement);
      });
    }
    
    // Create a chart showing grid charge changes over time
    function createGridChargeChart(changes) {
      if (changes.length === 0) return;
      
      const ctx = document.getElementById('gridChargeChart').getContext('2d');
      
      // Prepare data for chart
      const timestamps = changes.map(change => change.timestamp);
      const gridChargeValues = changes.map(change => 
        change.new_value === true || change.new_value === 'true' || change.new_value === 'on' ? 1 : 0
      );
      const socValues = changes.map(change => change.system_state.battery_soc);
      
      new Chart(ctx, {
        type: 'line',
        data: {
          labels: timestamps,
          datasets: [
            {
              label: 'Grid Charge State',
              data: gridChargeValues,
              backgroundColor: 'rgba(255, 99, 132, 0.2)',
              borderColor: 'rgba(255, 99, 132, 1)',
              borderWidth: 2,
              yAxisID: 'y1'
            },
            {
              label: 'Battery SOC%',
              data: socValues,
              backgroundColor: 'rgba(54, 162, 235, 0.2)',
              borderColor: 'rgba(54, 162, 235, 1)',
              borderWidth: 2,
              yAxisID: 'y'
            }
          ]
        },
        options: {
          scales: {
            y: {
              beginAtZero: true,
              position: 'left',
              title: {
                display: true,
                text: 'Battery SOC%'
              }
            },
            y1: {
              beginAtZero: true,
              max: 1,
              position: 'right',
              title: {
                display: true,
                text: 'Grid Charge (On/Off)'
              },
              grid: {
                drawOnChartArea: false
              },
              ticks: {
                callback: function(value) {
                  return value === 0 ? 'Off' : 'On';
                }
              }
            }
          }
        }
      });
    }
    
    // Initial fetch
    fetchGridChargeChanges();
    
    // Refresh data every 30 seconds
    setInterval(fetchGridChargeChanges, 30000);
  </script>
</body>
</html>

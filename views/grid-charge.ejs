<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Energy System - Grid Charge Settings</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        body {
            background-color: #f5f7fa;
            font-family: 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
        }
        .navbar {
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }
        .navbar-brand {
            font-weight: 600;
            letter-spacing: 0.5px;
        }
        .card {
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
            margin-bottom: 24px;
            border-radius: 10px;
            border: none;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        .card:hover {
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
            transform: translateY(-3px);
        }
        .card-header {
            background: linear-gradient(to right, #4a86e8, #5e9cea);
            color: white;
            border-bottom: none;
            border-radius: 10px 10px 0 0 !important;
            padding: 15px 20px;
        }
        .change-item {
            cursor: pointer;
            padding: 16px 20px;
            border-bottom: 1px solid #eaedf2;
            transition: all 0.25s ease;
            border-left: 3px solid transparent;
        }
        .change-item:hover {
            background-color: #f8f9fc;
            border-left: 3px solid #4a86e8;
        }
        .change-item:last-child {
            border-bottom: none;
        }
        .change-value {
            font-weight: 600;
            padding: 3px 8px;
            border-radius: 4px;
            font-size: 0.9rem;
        }
        .change-value.enabled {
            color: #10b981;
            background-color: rgba(16, 185, 129, 0.1);
        }
        .change-value.disabled {
            color: #f43f5e;
            background-color: rgba(244, 63, 94, 0.1);
        }
        .inverter-heading {
            background: linear-gradient(to right, #64748b, #94a3b8);
            padding: 12px 16px;
            font-weight: 600;
            margin-top: 20px;
            border-radius: 7px;
            color: white;
            letter-spacing: 0.5px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
        }
        .modal-header {
            background: linear-gradient(to right, #4a86e8, #5e9cea);
            color: white;
            border-bottom: none;
        }
        .modal-title {
            font-weight: 600;
        }
        .btn-close {
            filter: brightness(0) invert(1);
        }
        .timestamp {
            font-size: 0.85rem;
            color: #64748b;
        }
        .setting-title {
            font-weight: 600;
            font-size: 1.1rem;
            color: #334155;
        }
        .edit-icon {
            color: #4a86e8;
            transition: all 0.2s ease;
            height: 32px;
            width: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
        }
        .change-item:hover .edit-icon {
            background-color: rgba(74, 134, 232, 0.1);
            transform: scale(1.1);
        }
        .nav-link.active {
            font-weight: 600;
            color: #4a86e8 !important;
            border-bottom: 2px solid #4a86e8;
        }
        .form-select, .form-control {
            border-radius: 6px;
            border: 1px solid #d1d5db;
            padding: 10px 14px;
            transition: all 0.2s ease;
        }
        .form-select:focus, .form-control:focus {
            border-color: #4a86e8;
            box-shadow: 0 0 0 3px rgba(74, 134, 232, 0.25);
        }
        .btn-primary {
            background-color: #4a86e8;
            border-color: #4a86e8;
            font-weight: 500;
            padding: 8px 16px;
            border-radius: 6px;
            transition: all 0.2s ease;
        }
        .btn-primary:hover {
            background-color: #3b78e7;
            border-color: #3b78e7;
            transform: translateY(-1px);
            box-shadow: 0 4px 6px rgba(59, 120, 231, 0.2);
        }
        .btn-secondary {
            background-color: #94a3b8;
            border-color: #94a3b8;
            font-weight: 500;
            padding: 8px 16px;
            border-radius: 6px;
        }
        .alert {
            border-radius: 8px;
            border: none;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
        }
        table {
            border-collapse: separate;
            border-spacing: 0;
            width: 100%;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.03);
        }
        table th {
            background-color: #f8fafc;
            font-weight: 600;
            color: #334155;
            text-transform: uppercase;
            font-size: 0.75rem;
            letter-spacing: 0.5px;
        }
        table td, table th {
            padding: 12px 16px;
            border-bottom: 1px solid #eaedf2;
        }
        table tbody tr:last-child td {
            border-bottom: none;
        }
        table tbody tr:hover {
            background-color: rgba(74, 134, 232, 0.03);
        }
        .status-badge {
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 0.75rem;
            font-weight: 600;
            display: inline-block;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        .status-badge.enabled {
            background-color: rgba(16, 185, 129, 0.1);
            color: #10b981;
        }
        .status-badge.disabled {
            background-color: rgba(244, 63, 94, 0.1);
            color: #f43f5e;
        }
    </style>
</head>
<body>
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary mb-4">
        <div class="container">
            <a class="navbar-brand" href="/"><i class="fas fa-solar-panel me-2"></i>Energy System Monitor</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link" href="/"><i class="fas fa-home me-1"></i>Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link active" href="/grid-charge"><i class="fas fa-plug me-1"></i>Grid Charge</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/energy-pattern"><i class="fas fa-battery-three-quarters me-1"></i>Energy Pattern</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/work-mode"><i class="fas fa-cogs me-1"></i>Work Mode</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/battery-charging"><i class="fas fa-charging-station me-1"></i>Battery Charging</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/voltage-point"><i class="fas fa-bolt me-1"></i>Voltage Points</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/rules"><i class="fas fa-tasks me-1"></i>Rules</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/learner"><i class="fas fa-brain me-1"></i>Learner</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container">
        <!-- Alerts container -->
        <div id="alerts-container"></div>

        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0"><i class="fas fa-plug me-2"></i>Grid Charge Settings</h5>
                        <div>
                            <button class="btn btn-primary" id="refresh-settings">
                                <i class="fas fa-sync-alt me-1"></i> Refresh
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info shadow-sm">
                            <i class="fas fa-info-circle me-2"></i>
                            Click on any inverter's grid charge setting to toggle between Enabled and Disabled. Historical changes are displayed below.
                        </div>
                        
                        <!-- Recent changes will be loaded here -->
                        <div id="recent-changes-container">
                            <p class="text-center py-5">
                                <span class="spinner-border text-primary" role="status"></span>
                                <br>
                                <span class="mt-2 d-inline-block">Loading recent changes...</span>
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Setting Modal -->
    <div class="modal fade" id="editSettingModal" tabindex="-1" aria-labelledby="editSettingModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editSettingModalLabel">Edit Grid Charge Setting</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="editSettingForm">
                        <input type="hidden" id="edit-inverter">
                        
                        <div class="mb-3">
                            <label class="form-label fw-bold">Grid Charge</label>
                            <p class="text-muted small" id="setting-inverter-display">Inverter</p>
                        </div>
                        
                        <div class="mb-3">
                            <label for="edit-value" class="form-label">Select Setting</label>
                            <select class="form-select" id="edit-value">
                                <option value="Enabled">Enabled</option>
                                <option value="Disabled">Disabled</option>
                            </select>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Current Setting</label>
                            <p class="form-control-plaintext" id="current-value-display">-</p>
                        </div>

                        <div class="mb-3">
                            <div class="form-text">
                                <i class="fas fa-info-circle me-1"></i> 
                                When Grid Charge is enabled, the battery can be charged from the grid. When disabled, the battery will only charge from solar.
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="save-setting-btn">Save Changes</button>
                </div>
            </div>
        </div>
    </div>

    <!-- JavaScript Libraries -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
    
    <script>
        // Initialize the page
        $(document).ready(function() {
            // Load recent changes
            loadRecentChanges();
            
            // Set up event listeners
            setupEventListeners();
            
            // Initialize the edit modal
            initializeEditModal();
        });
        
        // Setup event listeners
        function setupEventListeners() {
            // Refresh button
            $('#refresh-settings').click(function() {
                loadRecentChanges();
                showAlert('info', 'Data refreshed');
            });
            
            // Save setting button
            $('#save-setting-btn').click(function() {
                saveGridChargeSetting();
            });
        }
        
        // Load recent changes
        function loadRecentChanges() {
            $.ajax({
                url: '/api/grid-charge-changes',
                method: 'GET',
                success: function(response) {
                    displayRecentChanges(response);
                },
                error: function() {
                    $('#recent-changes-container').html('<div class="alert alert-warning">Unable to load recent changes</div>');
                }
            });
        }
        
        // Display recent changes grouped by inverter
        function displayRecentChanges(changes) {
            const container = $('#recent-changes-container');
            
            if (!changes || changes.length === 0) {
                container.html('<div class="alert alert-warning">No recent grid charge changes recorded</div>');
                return;
            }
            
            // Group changes by inverter
            const inverterChanges = {};
            
            changes.forEach(change => {
                // Extract inverter from topic (e.g., "inverter_1/grid_charge/state")
                const topicParts = change.topic ? change.topic.split('/') : [];
                let inverter = "unknown";
                
                // Find the inverter_X part in the topic
                for (const part of topicParts) {
                    if (part.startsWith('inverter_')) {
                        inverter = part;
                        break;
                    }
                }
                
                // If no inverter found in topic but it's in the change_type, use that instead
                if (inverter === "unknown" && change.change_type && change.change_type.includes('inverter_')) {
                    inverter = change.change_type.split('/')[0];
                }
                
                // Initialize array for this inverter if it doesn't exist
                if (!inverterChanges[inverter]) {
                    inverterChanges[inverter] = [];
                }
                
                // Add change to appropriate inverter array
                inverterChanges[inverter].push(change);
            });
            
            // Display changes grouped by inverter
            let html = '';
            
            // Get all inverter keys and sort them naturally
            const inverters = Object.keys(inverterChanges).sort((a, b) => {
                const aNum = parseInt(a.replace('inverter_', ''));
                const bNum = parseInt(b.replace('inverter_', ''));
                return aNum - bNum;
            });
            
            for (const inverter of inverters) {
                // Get changes for this inverter and sort by timestamp (newest first)
                const inverterData = inverterChanges[inverter]
                    .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
                
                // Format inverter name for display
                const displayName = inverter.replace('_', ' ').charAt(0).toUpperCase() + inverter.slice(1).replace('_', ' ');
                
                html += `<div class="inverter-heading">${displayName}</div>`;
                
                // Get most recent state for this inverter
                const latestChange = inverterData[0];
                const isEnabled = latestChange.new_value === 'Enabled';
                
                // Create a clickable card with current state
                html += `
                    <div class="change-item" data-inverter="${inverter}" data-value="${latestChange.new_value}">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <div class="setting-title">Grid Charge Status</div>
                                <div class="mt-2">
                                    <span class="change-value ${isEnabled ? 'enabled' : 'disabled'}">${latestChange.new_value}</span>
                                </div>
                                <div class="mt-2">
                                    <small class="text-muted">Topic: ${latestChange.topic || 'N/A'}</small>
                                </div>
                            </div>
                            <div class="d-flex align-items-center">
                                <div class="d-flex flex-column align-items-end me-3">
                                    <span class="timestamp">Last changed:</span>
                                    <span class="fw-medium">${moment(latestChange.timestamp).format('MM/DD HH:mm')}</span>
                                </div>
                                <div class="edit-icon">
                                    <i class="fas fa-edit"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                
                // Show recent history for this inverter
                html += `<div class="mt-3 mb-4"><h6 class="text-muted">Recent History</h6>`;
                
                // Skip the first one (already shown above) and show at most 5
                const historyToShow = inverterData.slice(1, 6);
                
                if (historyToShow.length === 0) {
                    html += `<p class="text-muted small">No additional changes recorded</p>`;
                } else {
                    html += `<table class="table table-sm">
                        <thead>
                            <tr>
                                <th>Timestamp</th>
                                <th>From</th>
                                <th>To</th>
                            </tr>
                        </thead>
                        <tbody>`;
                        
                    historyToShow.forEach(change => {
                        html += `<tr>
                            <td>${moment(change.timestamp).format('MM/DD HH:mm')}</td>
                            <td>${change.old_value || '-'}</td>
                            <td>${change.new_value}</td>
                        </tr>`;
                        html += `<tr class="text-muted">
                            <td colspan="3"><small>Topic: ${change.topic || 'N/A'}</small></td>
                        </tr>`;
                    });
                    
                    html += `</tbody></table>`;
                }
                
                html += `</div>`;
            }
            
            container.html(html);
            
            // Add click event to change items
            $('.change-item').click(function() {
                const inverter = $(this).data('inverter');
                const value = $(this).data('value');
                openEditModal(inverter, value);
            });
        }
        
        // Open the edit modal for a specific setting
        function openEditModal(inverter, currentValue) {
            // Set hidden fields
            $('#edit-inverter').val(inverter);
            
            // Set display labels
            $('#setting-inverter-display').text(inverter.replace('_', ' ').charAt(0).toUpperCase() + inverter.slice(1).replace('_', ' '));
            $('#current-value-display').text(currentValue);
            
            // Set the current value in the dropdown
            $('#edit-value').val(currentValue);
            
            // Show the modal
            const editModal = new bootstrap.Modal(document.getElementById('editSettingModal'));
            editModal.show();
        }
        
        // Save the grid charge setting
        function saveGridChargeSetting() {
            const inverter = $('#edit-inverter').val();
            const value = $('#edit-value').val();
            
            // Validate input
            if (!value) {
                showAlert('warning', 'Please select a setting', true);
                return;
            }
            
            // Send to the server
            $.ajax({
                url: '/api/command',
                method: 'POST',
                data: {
                    topic: `energy/${inverter}/grid_charge/set`,
                    value: value
                },
                success: function(response) {
                    if (response.success) {
                        // Hide the modal
                        const editModal = bootstrap.Modal.getInstance(document.getElementById('editSettingModal'));
                        editModal.hide();
                        
                        showAlert('success', `Grid charge setting updated successfully to "${value}"`);
                        
                        // Refresh the changes after a short delay
                        setTimeout(() => {
                            loadRecentChanges();
                        }, 1000);
                    } else {
                        showAlert('danger', `Failed to update setting: ${response.message || 'Unknown error'}`, true);
                    }
                },
                error: function(error) {
                    showAlert('danger', `Error updating setting: ${error.responseJSON?.error || 'Server error'}`, true);
                }
            });
        }
        
        // Initialize the edit modal
        function initializeEditModal() {
            // This sets up the modal but doesn't open it yet
            const editModal = new bootstrap.Modal(document.getElementById('editSettingModal'));
        }
        
        // Show alert message
        function showAlert(type, message, inModal = false) {
            const alertId = 'alert-' + Date.now();
            const alertHtml = `
                <div id="${alertId}" class="alert alert-${type} alert-dismissible fade show" role="alert">
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            `;
            
            if (inModal) {
                // Insert at the top of the modal body
                $('.modal-body').prepend(alertHtml);
            } else {
                // Insert at the top of the page
                $('#alerts-container').append(alertHtml);
            }
            
            // Auto-dismiss after 3 seconds
            setTimeout(() => {
                $(`#${alertId}`).alert('close');
            }, 3000);
        }
    </script>
</body>
</html>

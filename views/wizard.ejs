<!-- views/wizard.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Energy Management Rule Wizard</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <style>
        .card-header {
            background-color: #f8f9fa;
            font-weight: bold;
        }
        .condition-card, .action-card {
            margin-bottom: 15px;
            border: 1px solid #dee2e6;
            border-radius: 0.25rem;
        }
        .condition-card .card-body, .action-card .card-body {
            padding: 1rem;
        }
        .preview-container {
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 0.25rem;
            padding: 1rem;
            margin-bottom: 15px;
        }
        .preview-line {
            margin-bottom: 5px;
        }
        .wizard-nav {
            margin-bottom: 20px;
        }
        .wizard-step {
            display: none;
        }
        .wizard-step.active {
            display: block;
        }
        .calendar-dates {
            display: none;
        }
        .calendar-dates.show {
            display: block;
        }
        .date-tag {
            display: inline-block;
            background-color: #e9ecef;
            padding: 0.25rem 0.5rem;
            margin: 0.25rem;
            border-radius: 0.25rem;
        }
        .date-tag .close {
            margin-left: 5px;
            cursor: pointer;
        }
        .success-message {
            display: none;
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1050;
        }
    </style>
</head>
<body>

<div class="container mt-4">
    <div class="success-message alert alert-success alert-dismissible fade show" role="alert">
        <strong>Success!</strong> Your rule has been created successfully.
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
    
    <h1>Energy Management Rule Wizard</h1>
    
    <div class="wizard-nav">
        <div class="progress">
            <div class="progress-bar" role="progressbar" style="width: 25%;" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">Step 1 of 4</div>
        </div>
    </div>
    
    <form id="ruleWizardForm">
        <!-- Step 1: Basic Information -->
        <div class="wizard-step active" id="step1">
            <div class="card mb-4">
                <div class="card-header">
                    Step 1: Basic Information
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label for="ruleName" class="form-label">Rule Name *</label>
                        <input type="text" class="form-control" id="ruleName" name="name" required>
                    </div>
                    <div class="mb-3">
                        <label for="ruleDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="ruleDescription" name="description" rows="3"></textarea>
                    </div>
                    <div class="form-check form-switch mb-3">
                        <input class="form-check-input" type="checkbox" id="ruleActive" name="active" checked>
                        <label class="form-check-label" for="ruleActive">Rule Active</label>
                    </div>
                </div>
            </div>
            
            <div class="d-flex justify-content-between">
                <button type="button" class="btn btn-secondary" onclick="window.location.href='/rules'">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="nextStep(1)">Next</button>
            </div>
        </div>
        
        <!-- Step 2: Conditions -->
        <div class="wizard-step" id="step2">
            <div class="card mb-4">
                <div class="card-header">
                    Step 2: Conditions
                </div>
                <div class="card-body">
                    <p class="text-muted">Define when this rule should run. Add one or more conditions that must be met.</p>
                    
                    <div id="conditionsContainer">
                        <!-- Conditions will be added here dynamically -->
                    </div>
                    
                    <button type="button" class="btn btn-outline-secondary" onclick="addCondition()">
                        <i class="bi bi-plus-circle"></i> Add Condition
                    </button>
                </div>
            </div>
            
            <div class="d-flex justify-content-between">
                <button type="button" class="btn btn-secondary" onclick="prevStep(2)">Previous</button>
                <button type="button" class="btn btn-primary" onclick="nextStep(2)">Next</button>
            </div>
        </div>
        
        <!-- Step 3: Time Restrictions -->
        <div class="wizard-step" id="step3">
            <div class="card mb-4">
                <div class="card-header">
                    Step 3: Time Restrictions
                </div>
                <div class="card-body">
                    <div class="form-check form-switch mb-3">
                        <input class="form-check-input" type="checkbox" id="enableTimeRestrictions" name="timeRestrictionsEnabled">
                        <label class="form-check-label" for="enableTimeRestrictions">Enable Time Restrictions</label>
                    </div>
                    
                    <div id="timeRestrictionsContainer" style="display: none;">
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label class="form-label">Days of Week</label>
                                <div class="d-flex flex-wrap">
                                    <div class="form-check me-3">
                                        <input class="form-check-input" type="checkbox" id="dayMonday" name="days" value="monday">
                                        <label class="form-check-label" for="dayMonday">Monday</label>
                                    </div>
                                    <div class="form-check me-3">
                                        <input class="form-check-input" type="checkbox" id="dayTuesday" name="days" value="tuesday">
                                        <label class="form-check-label" for="dayTuesday">Tuesday</label>
                                    </div>
                                    <div class="form-check me-3">
                                        <input class="form-check-input" type="checkbox" id="dayWednesday" name="days" value="wednesday">
                                        <label class="form-check-label" for="dayWednesday">Wednesday</label>
                                    </div>
                                    <div class="form-check me-3">
                                        <input class="form-check-input" type="checkbox" id="dayThursday" name="days" value="thursday">
                                        <label class="form-check-label" for="dayThursday">Thursday</label>
                                    </div>
                                    <div class="form-check me-3">
                                        <input class="form-check-input" type="checkbox" id="dayFriday" name="days" value="friday">
                                        <label class="form-check-label" for="dayFriday">Friday</label>
                                    </div>
                                    <div class="form-check me-3">
                                        <input class="form-check-input" type="checkbox" id="daySaturday" name="days" value="saturday">
                                        <label class="form-check-label" for="daySaturday">Saturday</label>
                                    </div>
                                    <div class="form-check me-3">
                                        <input class="form-check-input" type="checkbox" id="daySunday" name="days" value="sunday">
                                        <label class="form-check-label" for="daySunday">Sunday</label>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="startTime" class="form-label">Start Time</label>
                                <input type="text" class="form-control time-picker" id="startTime" name="startTime" placeholder="HH:MM">
                            </div>
                            <div class="col-md-6">
                                <label for="endTime" class="form-label">End Time</label>
                                <input type="text" class="form-control time-picker" id="endTime" name="endTime" placeholder="HH:MM">
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" id="enableSpecificDates" name="enableSpecificDates">
                                <label class="form-check-label" for="enableSpecificDates">Enable Specific Dates (Holiday Mode)</label>
                            </div>
                        </div>
                        
                        <div class="calendar-dates" id="specificDatesContainer">
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label for="specificDate" class="form-label">Select Date</label>
                                    <div class="input-group">
                                        <input type="text" class="form-control date-picker" id="specificDate" placeholder="YYYY-MM-DD">
                                        <button class="btn btn-outline-secondary" type="button" id="addDateBtn">Add</button>
                                    </div>
                                    <small class="form-text text-muted">Add specific dates to the calendar (e.g., holidays, vacations)</small>
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">Selected Dates</label>
                                    <div id="selectedDates" class="p-2 border rounded">
                                        <!-- Selected dates will appear here -->
                                        <p class="text-muted mb-0" id="noDatesMessage">No dates selected</p>
                                    </div>
                                </div>
                            </div>
                            <input type="hidden" id="calendarDates" name="calendarDates" value="">
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="d-flex justify-content-between">
                <button type="button" class="btn btn-secondary" onclick="prevStep(3)">Previous</button>
                <button type="button" class="btn btn-primary" onclick="nextStep(3)">Next</button>
            </div>
        </div>
        
        <!-- Step 4: Actions -->
        <div class="wizard-step" id="step4">
            <div class="card mb-4">
                <div class="card-header">
                    Step 4: Actions
                </div>
                <div class="card-body">
                    <p class="text-muted">Define what actions should be taken when conditions are met.</p>
                    
                    <div id="actionsContainer">
                        <!-- Actions will be added here dynamically -->
                    </div>
                    
                    <button type="button" class="btn btn-outline-secondary" onclick="addAction()">
                        <i class="bi bi-plus-circle"></i> Add Action
                    </button>
                </div>
            </div>
            
            <div class="card mb-4">
                <div class="card-header">
                    Rule Preview
                </div>
                <div class="card-body">
                    <div class="preview-container">
                        <div id="rulePreview">
                            <!-- Rule preview will be shown here -->
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="d-flex justify-content-between">
                <button type="button" class="btn btn-secondary" onclick="prevStep(4)">Previous</button>
                <button type="button" class="btn btn-primary" onclick="saveRule()">Save Rule</button>
            </div>
        </div>
    </form>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script>
    // Global variables to track conditions and actions
    let conditions = [];
    let actions = [];
    let selectedDates = [];
    let currentStep = 1;
    
    // Initialize when the document is ready
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize time pickers
        document.querySelectorAll('.time-picker').forEach(el => {
            flatpickr(el, {
                enableTime: true,
                noCalendar: true,
                dateFormat: "H:i",
                time_24hr: true
            });
        });
        
        // Initialize date picker
        flatpickr('.date-picker', {
            dateFormat: "Y-m-d",
        });
        
        // Setup event listeners
        document.getElementById('enableTimeRestrictions').addEventListener('change', function() {
            document.getElementById('timeRestrictionsContainer').style.display = this.checked ? 'block' : 'none';
        });
        
        document.getElementById('enableSpecificDates').addEventListener('change', function() {
            document.getElementById('specificDatesContainer').classList.toggle('show', this.checked);
        });
        
        document.getElementById('addDateBtn').addEventListener('click', function() {
            const dateInput = document.getElementById('specificDate');
            const date = dateInput.value;
            
            if (date && !selectedDates.includes(date)) {
                selectedDates.push(date);
                updateSelectedDates();
                dateInput.value = '';
            }
        });
        
        // Add initial condition and action
        addCondition();
        addAction();
        
        // Update the rule preview
        updateRulePreview();
    });
    
    // Navigation functions
    function nextStep(step) {
        // Validate current step
        if (step === 1) {
            if (!document.getElementById('ruleName').value) {
                alert('Please enter a rule name');
                return;
            }
        } else if (step === 2) {
            updateConditionsFromUI();
            if (conditions.length === 0) {
                if (!confirm('Are you sure you want to continue without any conditions? The rule will always execute.')) {
                    return;
                }
            }
        } else if (step === 3) {
            const timeRestrictionsEnabled = document.getElementById('enableTimeRestrictions').checked;
            if (timeRestrictionsEnabled) {
                const startTime = document.getElementById('startTime').value;
                const endTime = document.getElementById('endTime').value;
                
                if (!startTime || !endTime) {
                    alert('Please set both start and end times');
                    return;
                }
                
                const daysSelected = Array.from(document.querySelectorAll('input[name="days"]:checked')).length > 0;
                if (!daysSelected) {
                    alert('Please select at least one day of the week');
                    return;
                }
            }
        }
        
        // Hide current step, show next step
        document.getElementById(`step${step}`).classList.remove('active');
        document.getElementById(`step${step+1}`).classList.add('active');
        currentStep = step + 1;
        
        // Update progress bar
        const progressBar = document.querySelector('.progress-bar');
        progressBar.style.width = `${25 * currentStep}%`;
        progressBar.setAttribute('aria-valuenow', 25 * currentStep);
        progressBar.textContent = `Step ${currentStep} of 4`;
        
        // Update rule preview in the last step
        if (currentStep === 4) {
            updateRulePreview();
        }
    }
    
    function prevStep(step) {
        document.getElementById(`step${step}`).classList.remove('active');
        document.getElementById(`step${step-1}`).classList.add('active');
        currentStep = step - 1;
        
        // Update progress bar
        const progressBar = document.querySelector('.progress-bar');
        progressBar.style.width = `${25 * currentStep}%`;
        progressBar.setAttribute('aria-valuenow', 25 * currentStep);
        progressBar.textContent = `Step ${currentStep} of 4`;
    }
    
    // Add a new condition
    function addCondition() {
        const conditionId = `condition-${Date.now()}`;
        const conditionsContainer = document.getElementById('conditionsContainer');
        
        const conditionHTML = `
            <div class="condition-card" id="${conditionId}">
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4">
                            <label class="form-label">Parameter</label>
                            <select class="form-select condition-parameter" onchange="updateConditionOperatorOptions(this)">
                                <option value="battery_soc">Battery SOC (%)</option>
                                <option value="pv_power">PV Power (W)</option>
                                <option value="load">Load Power (W)</option>
                                <option value="grid_voltage">Grid Voltage (V)</option>
                                <option value="grid_power">Grid Power (W)</option>
                                <option value="battery_voltage">Battery Voltage (V)</option>
                                <option value="battery_current">Battery Current (A)</option>
                            </select>
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">Operator</label>
                            <select class="form-select condition-operator">
                                <option value="gt">Greater than (>)</option>
                                <option value="lt">Less than (<)</option>
                                <option value="eq">Equal to (=)</option>
                                <option value="gte">Greater than or equal to (≥)</option>
                                <option value="lte">Less than or equal to (≤)</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Value</label>
                            <input type="number" class="form-control condition-value" step="0.1">
                        </div>
                        <div class="col-md-1 d-flex align-items-end">
                            <button type="button" class="btn btn-outline-danger btn-sm" onclick="removeCondition('${conditionId}')">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        conditionsContainer.insertAdjacentHTML('beforeend', conditionHTML);
    }
    
    // Remove a condition
    function removeCondition(conditionId) {
        document.getElementById(conditionId).remove();
    }
    
    // Update operator options based on parameter
    function updateConditionOperatorOptions(parameterSelect) {
        const operatorSelect = parameterSelect.closest('.row').querySelector('.condition-operator');
        
        // Reset options
        operatorSelect.innerHTML = `
            <option value="gt">Greater than (>)</option>
            <option value="lt">Less than (<)</option>
            <option value="eq">Equal to (=)</option>
            <option value="gte">Greater than or equal to (≥)</option>
            <option value="lte">Less than or equal to (≤)</option>
        `;
    }
    
    // Add a new action
    function addAction() {
        const actionId = `action-${Date.now()}`;
        const actionsContainer = document.getElementById('actionsContainer');
        
        const actionHTML = `
            <div class="action-card" id="${actionId}">
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4">
                            <label class="form-label">Setting</label>
                            <select class="form-select action-setting" onchange="updateActionValueOptions(this)">
                                <option value="grid_charge">Grid Charge</option>
                                <option value="energy_pattern">Energy Pattern</option>
                                <option value="work_mode">Work Mode</option>
                                <option value="max_discharge_current">Max Discharge Current</option>
                                <option value="max_charge_current">Max Charge Current</option>
                                <option value="max_grid_charge_current">Max Grid Charge Current</option>
                                <option value="solar_export_when_battery_full">Solar Export When Battery Full</option>
                                <option value="max_sell_power">Max Sell Power</option>
                                <option value="remote_switch">Remote Switch</option>
                                <option value="generator_charge">Generator Charge</option>
                            </select>
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">Value</label>
                            <select class="form-select action-value">
                                <option value="Enabled">Enabled</option>
                                <option value="Disabled">Disabled</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Inverter</label>
                            <select class="form-select action-inverter">
                                <option value="all">All Inverters</option>
                                <option value="inverter_1">Inverter 1</option>
                                <option value="inverter_2">Inverter 2</option>
                            </select>
                        </div>
                        <div class="col-md-1 d-flex align-items-end">
                            <button type="button" class="btn btn-outline-danger btn-sm" onclick="removeAction('${actionId}')">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        actionsContainer.insertAdjacentHTML('beforeend', actionHTML);
    }
    
    // Remove an action
    function removeAction(actionId) {
        document.getElementById(actionId).remove();
    }
    
    // Update value options based on setting
    function updateActionValueOptions(settingSelect) {
        const valueSelect = settingSelect.closest('.row').querySelector('.action-value');
        const setting = settingSelect.value;
        
        // Clear existing options
        valueSelect.innerHTML = '';
        
        // Add appropriate options based on setting
        if (setting === 'grid_charge' || setting === 'generator_charge' || 
            setting === 'remote_switch' || setting === 'solar_export_when_battery_full') {
            valueSelect.innerHTML = `
                <option value="Enabled">Enabled</option>
                <option value="Disabled">Disabled</option>
            `;
        } else if (setting === 'energy_pattern' || setting === 'work_mode') {
            valueSelect.innerHTML = `
                <option value="Battery first">Battery First</option>
                <option value="Grid first">Grid First</option>
                <option value="Solar first">Solar First</option>
                <option value="Solar + Battery">Solar + Battery</option>
                <option value="Solar + Grid">Solar + Grid</option>
            `;
        } else if (setting === 'max_discharge_current' || setting === 'max_charge_current' || 
                  setting === 'max_grid_charge_current') {
            // Convert to input field for numeric values
            const rowElement = valueSelect.closest('.row');
            const colDiv = valueSelect.closest('.col-md-4');
            
            colDiv.innerHTML = `
                <label class="form-label">Value (A)</label>
                <input type="number" class="form-control action-value" min="0" max="100" step="0.1">
            `;
        } else if (setting === 'max_sell_power') {
            const rowElement = valueSelect.closest('.row');
            const colDiv = valueSelect.closest('.col-md-4');
            
            colDiv.innerHTML = `
                <label class="form-label">Value (W)</label>
                <input type="number" class="form-control action-value" min="0" max="10000" step="100">
            `;
        }
    }
    
    // Update the conditions array from UI
    function updateConditionsFromUI() {
        conditions = [];
        
        document.querySelectorAll('.condition-card').forEach(card => {
            const parameter = card.querySelector('.condition-parameter').value;
            const operator = card.querySelector('.condition-operator').value;
            const value = parseFloat(card.querySelector('.condition-value').value);
            
            if (parameter && operator && !isNaN(value)) {
                conditions.push({ parameter, operator, value });
            }
        });
    }
    
    // Update the actions array from UI
    function updateActionsFromUI() {
        actions = [];
        
        document.querySelectorAll('.action-card').forEach(card => {
            const setting = card.querySelector('.action-setting').value;
            const valueElement = card.querySelector('.action-value');
            let value;
            
            // Check if the value is a select or input
            if (valueElement.tagName === 'SELECT') {
                value = valueElement.value;
            } else {
                value = valueElement.value;
            }
            
            const inverter = card.querySelector('.action-inverter').value;
            
            if (setting && value && inverter) {
                actions.push({ setting, value, inverter });
            }
        });
    }
    
    // Update the rule preview
    function updateRulePreview() {
        const name = document.getElementById('ruleName').value || 'Unnamed Rule';
        const description = document.getElementById('ruleDescription').value || 'No description';
        const active = document.getElementById('ruleActive').checked;
        
        updateConditionsFromUI();
        updateActionsFromUI();
        
        // Build the preview HTML
        let previewHTML = `
            <div class="preview-line"><strong>Name:</strong> ${name}</div>
            <div class="preview-line"><strong>Description:</strong> ${description}</div>
            <div class="preview-line"><strong>Active:</strong> ${active ? 'Yes' : 'No'}</div>
            <div class="preview-line"><strong>Conditions:</strong></div>
        `;
        
        if (conditions.length === 0) {
            previewHTML += `<div class="preview-line ms-3">No conditions (rule will always execute)</div>`;
        } else {
            conditions.forEach((condition, index) => {
                let parameterName = condition.parameter;
                let operatorSymbol = '';
                
                // Map parameters to human-readable names
                switch (condition.parameter) {
                    case 'battery_soc': parameterName = 'Battery SOC'; break;
                    case 'pv_power': parameterName = 'PV Power'; break;
                    case 'load': parameterName = 'Load Power'; break;
                    case 'grid_voltage': parameterName = 'Grid Voltage'; break;
                    case 'grid_power': parameterName = 'Grid Power'; break;
                    case 'battery_voltage': parameterName = 'Battery Voltage'; break;
                    case 'battery_current': parameterName = 'Battery Current'; break;
                }
                
                // Map operators to symbols
                switch (condition.operator) {
                    case 'gt': operatorSymbol = '>'; break;
                    case 'lt': operatorSymbol = '<'; break;
                    case 'eq': operatorSymbol = '='; break;
                    case 'gte': operatorSymbol = '≥'; break;
                    case 'lte': operatorSymbol = '≤'; break;
                }
                
                const logicalOperator = index === 0 ? 'If' : 'AND';
                
                // Add units based on parameter
                let unit = '';
                if (condition.parameter === 'battery_soc') unit = '%';
                else if (condition.parameter === 'pv_power' || condition.parameter === 'load' || condition.parameter === 'grid_power') unit = 'W';
                else if (condition.parameter === 'grid_voltage' || condition.parameter === 'battery_voltage') unit = 'V';
                else if (condition.parameter === 'battery_current') unit = 'A';
                
                previewHTML += `<div class="preview-line ms-3">${logicalOperator} ${parameterName} ${operatorSymbol} ${condition.value}${unit}</div>`;
            });
        }
        
        // Add time restrictions
        const timeRestrictionsEnabled = document.getElementById('enableTimeRestrictions').checked;
        if (timeRestrictionsEnabled) {
            previewHTML += `<div class="preview-line"><strong>Time Restrictions:</strong></div>`;
            
            // Add days
            const selectedDays = Array.from(document.querySelectorAll('input[name="days"]:checked'))
                .map(input => input.value.charAt(0).toUpperCase() + input.value.slice(1));
            
            previewHTML += `<div class="preview-line ms-3">Days: ${selectedDays.join(', ') || 'None'}</div>`;
            
            // Add time range
            const startTime = document.getElementById('startTime').value;
            const endTime = document.getElementById('endTime').value;
            
            if (startTime && endTime) {
                previewHTML += `<div class="preview-line ms-3">Time: ${startTime} to ${endTime}</div>`;
            }
            
            // Add specific dates if enabled
            const specificDatesEnabled = document.getElementById('enableSpecificDates').checked;
            if (specificDatesEnabled && selectedDates.length > 0) {
                previewHTML += `<div class="preview-line ms-3">Specific Dates: ${selectedDates.join(', ')}</div>`;
            }
        }
        
        // Add actions
        previewHTML += `<div class="preview-line"><strong>Actions:</strong></div>`;
        
        if (actions.length === 0) {
            previewHTML += `<div class="preview-line ms-3">No actions defined</div>`;
        } else {
            actions.forEach((action, index) => {
                let settingName = action.setting;
                let valueDisplay = action.value;
                
                // Map settings to human-readable names
                switch (action.setting) {
                    case 'grid_charge': settingName = 'Grid Charge'; break;
                    case 'energy_pattern': settingName = 'Energy Pattern'; break;
                    case 'work_mode': settingName = 'Work Mode'; break;
                    case 'max_discharge_current': settingName = 'Max Discharge Current'; break;
                    case 'max_charge_current': settingName = 'Max Charge Current'; break;
                    case 'max_grid_charge_current': settingName = 'Max Grid Charge Current'; break;
                    case 'solar_export_when_battery_full': settingName = 'Solar Export When Battery Full'; break;
                    case 'max_sell_power': settingName = 'Max Sell Power'; break;
                    case 'remote_switch': settingName = 'Remote Switch'; break;
                    case 'generator_charge': settingName = 'Generator Charge'; break;
                }
                
                // Add units based on setting
                if (action.setting === 'max_discharge_current' || action.setting === 'max_charge_current' ||
                    action.setting === 'max_grid_charge_current') {
                    valueDisplay = `${action.value} A`;
                } else if (action.setting === 'max_sell_power') {
                    valueDisplay = `${action.value} W`;
                }
                
                previewHTML += `<div class="preview-line ms-3">Set ${settingName} to ${valueDisplay} on ${action.inverter === 'all' ? 'All Inverters' : action.inverter.replace('_', ' ')}</div>`;
            });
        }
        
        document.getElementById('rulePreview').innerHTML = previewHTML;
    }
    
    // Update the selected dates UI
    function updateSelectedDates() {
        const selectedDatesContainer = document.getElementById('selectedDates');
        const noDatesMessage = document.getElementById('noDatesMessage');
        
        if (selectedDates.length > 0) {
            noDatesMessage.style.display = 'none';
            
            // Clear and rebuild the dates display
            const existingTags = selectedDatesContainer.querySelectorAll('.date-tag');
            existingTags.forEach(tag => tag.remove());
            
            selectedDates.forEach(date => {
                const dateTag = document.createElement('span');
                dateTag.className = 'date-tag';
                dateTag.innerHTML = `${date} <span class="close" onclick="removeDate('${date}')">&times;</span>`;
                selectedDatesContainer.appendChild(dateTag);
            });
            
            // Update hidden input
            document.getElementById('calendarDates').value = JSON.stringify(selectedDates);
        } else {
            noDatesMessage.style.display = 'block';
            document.getElementById('calendarDates').value = '';
        }
    }
    
    // Remove a date from the selected dates
    function removeDate(date) {
        selectedDates = selectedDates.filter(d => d !== date);
        updateSelectedDates();
    }
    
    // Save the rule to the server
    function saveRule() {
        // Update from UI
        updateConditionsFromUI();
        updateActionsFromUI();
        
        // Build the rule object
        const ruleName = document.getElementById('ruleName').value;
        const ruleDescription = document.getElementById('ruleDescription').value;
        const ruleActive = document.getElementById('ruleActive').checked;
        
        if (!ruleName) {
            alert('Please enter a rule name');
            return;
        }
        
        if (actions.length === 0) {
            alert('Please add at least one action');
            return;
        }
        
        // Build time restrictions
        const timeRestrictionsEnabled = document.getElementById('enableTimeRestrictions').checked;
        let timeRestrictions = {
            enabled: timeRestrictionsEnabled
        };
        
        if (timeRestrictionsEnabled) {
            // Get selected days
            const selectedDays = Array.from(document.querySelectorAll('input[name="days"]:checked'))
                .map(input => input.value);
            
            const startTime = document.getElementById('startTime').value;
            const endTime = document.getElementById('endTime').value;
            
            timeRestrictions.days = selectedDays;
            timeRestrictions.startTime = startTime;
            timeRestrictions.endTime = endTime;
            
            // Add specific dates if enabled
            const specificDatesEnabled = document.getElementById('enableSpecificDates').checked;
            if (specificDatesEnabled) {
                timeRestrictions.specificDates = selectedDates;
            }
        }
        
        // Create the rule object
        const rule = {
            name: ruleName,
            description: ruleDescription,
            active: ruleActive,
            conditions: conditions,
            timeRestrictions: timeRestrictions,
            actions: actions
        };
        
        // Send to server
        fetch('/api/rules', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(rule)
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            console.log('Rule created successfully:', data);
            
            // Show success message
            const successMessage = document.querySelector('.success-message');
            successMessage.style.display = 'block';
            
            // Redirect after a short delay
            setTimeout(() => {
                window.location.href = '/rules';
            }, 2000);
        })
        .catch(error => {
            console.error('Error creating rule:', error);
            alert('Error creating rule: ' + error.message);
        });
    }
</script>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Energy System Learner</title>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <style>
    .card-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
      gap: 1.5rem;
    }
    .pattern-bg {
      background-color: #f8fafc;
      background-image: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23a5f3fc' fill-opacity='0.2'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
    }
    .change-card {
      transition: all 0.3s ease;
    }
    .change-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    }
    .badge {
      position: absolute;
      top: -10px;
      right: -10px;
    }
  </style>
</head>
<body class="pattern-bg min-h-screen">
  <div class="container mx-auto px-4 py-8">
    <header class="mb-10">
      <div class="flex justify-between items-center">
        <h1 class="text-3xl font-bold text-gray-800">Energy System Learner</h1>
        <div class="flex items-center space-x-4">
          <div class="relative inline-block">
            <span class="<%= active ? 'bg-green-500' : 'bg-gray-400' %> inline-block w-3 h-3 rounded-full"></span>
            <span class="ml-2 text-gray-700"><%= active ? 'Active' : 'Inactive' %></span>
          </div>
          <button id="toggleLearner" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 transition">
            <%= active ? 'Disable' : 'Enable' %> Learner
          </button>
        </div>
      </div>
      <p class="text-gray-600 mt-2">Monitoring <%= monitored_settings.length %> settings | <%= changes_count %> total changes recorded</p>
    </header>

    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-10">
      <!-- Energy Pattern Card -->
      <div class="bg-white rounded-xl shadow-lg overflow-hidden">
        <div class="px-6 py-4 bg-gradient-to-r from-blue-500 to-cyan-500">
          <div class="flex justify-between items-center">
            <h2 class="text-xl font-semibold text-white">Energy Pattern Changes</h2>
            <div class="bg-white text-blue-600 rounded-full h-8 w-8 flex items-center justify-center">
              <i class="fas fa-bolt"></i>
            </div>
          </div>
        </div>
        <div class="p-6" id="energyPatternContainer">
          <div class="animate-pulse flex space-x-4">
            <div class="flex-1 space-y-4 py-1">
              <div class="h-4 bg-gray-200 rounded w-3/4"></div>
              <div class="space-y-2">
                <div class="h-4 bg-gray-200 rounded"></div>
                <div class="h-4 bg-gray-200 rounded w-5/6"></div>
              </div>
            </div>
          </div>
        </div>
        <div class="px-6 py-3 bg-gray-100 text-center">
          <a href="/energy-pattern" class="text-blue-600 hover:text-blue-800 font-medium">
            View All Energy Pattern Changes <i class="fas fa-arrow-right ml-1"></i>
          </a>
        </div>
      </div>

      <!-- Grid Charge Card -->
      <div class="bg-white rounded-xl shadow-lg overflow-hidden">
        <div class="px-6 py-4 bg-gradient-to-r from-purple-500 to-pink-500">
          <div class="flex justify-between items-center">
            <h2 class="text-xl font-semibold text-white">Grid Charge Changes</h2>
            <div class="bg-white text-purple-600 rounded-full h-8 w-8 flex items-center justify-center">
              <i class="fas fa-plug"></i>
            </div>
          </div>
        </div>
        <div class="p-6" id="gridChargeContainer">
          <div class="animate-pulse flex space-x-4">
            <div class="flex-1 space-y-4 py-1">
              <div class="h-4 bg-gray-200 rounded w-3/4"></div>
              <div class="space-y-2">
                <div class="h-4 bg-gray-200 rounded"></div>
                <div class="h-4 bg-gray-200 rounded w-5/6"></div>
              </div>
            </div>
          </div>
        </div>
        <div class="px-6 py-3 bg-gray-100 text-center">
          <a href="/grid-charge" class="text-purple-600 hover:text-purple-800 font-medium">
            View All Grid Charge Changes <i class="fas fa-arrow-right ml-1"></i>
          </a>
        </div>
      </div>
    </div>


    <div class="bg-white rounded-xl shadow-lg overflow-hidden mb-10">
      <div class="px-6 py-4 bg-gradient-to-r from-indigo-500 to-violet-500">
        <div class="flex justify-between items-center">
          <h2 class="text-xl font-semibold text-white">Voltage Point Changes</h2>
          <div class="bg-white text-indigo-600 rounded-full h-8 w-8 flex items-center justify-center">
            <i class="fas fa-bolt"></i>
          </div>
        </div>
      </div>
      <div class="p-6" id="voltagePointContainer">
        <div class="animate-pulse flex space-x-4">
          <div class="flex-1 space-y-4 py-1">
            <div class="h-4 bg-gray-200 rounded w-3/4"></div>
            <div class="space-y-2">
              <div class="h-4 bg-gray-200 rounded"></div>
              <div class="h-4 bg-gray-200 rounded w-5/6"></div>
            </div>
          </div>
        </div>
      </div>
      <div class="px-6 py-3 bg-gray-100 text-center">
        <a href="/voltage-point" class="text-indigo-600 hover:text-indigo-800 font-medium">
          View All Voltage Point Changes <i class="fas fa-arrow-right ml-1"></i>
        </a>
      </div>
    </div>

    <!-- System State Card -->
    <div class="bg-white rounded-xl shadow-lg overflow-hidden mb-10">
      <div class="px-6 py-4 bg-gradient-to-r from-green-500 to-emerald-500">
        <div class="flex justify-between items-center">
          <h2 class="text-xl font-semibold text-white">Current System State</h2>
          <div class="bg-white text-green-600 rounded-full h-8 w-8 flex items-center justify-center">
            <i class="fas fa-tachometer-alt"></i>
          </div>
        </div>
      </div>
      <div class="p-6" id="systemStateContainer">
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          <!-- System state metrics will be populated here -->
          <div class="animate-pulse flex space-x-4">
            <div class="flex-1 space-y-4 py-1">
              <div class="h-4 bg-gray-200 rounded w-3/4"></div>
              <div class="h-4 bg-gray-200 rounded w-5/6"></div>
            </div>
          </div>
          <div class="animate-pulse flex space-x-4">
            <div class="flex-1 space-y-4 py-1">
              <div class="h-4 bg-gray-200 rounded w-3/4"></div>
              <div class="h-4 bg-gray-200 rounded w-5/6"></div>
            </div>
          </div>
          <div class="animate-pulse flex space-x-4">
            <div class="flex-1 space-y-4 py-1">
              <div class="h-4 bg-gray-200 rounded w-3/4"></div>
              <div class="h-4 bg-gray-200 rounded w-5/6"></div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="bg-white rounded-xl shadow-lg overflow-hidden">
      <div class="px-6 py-4 bg-gradient-to-r from-amber-500 to-orange-500">
        <div class="flex justify-between items-center">
          <h2 class="text-xl font-semibold text-white">Recent Setting Changes</h2>
          <div class="bg-white text-amber-600 rounded-full h-8 w-8 flex items-center justify-center">
            <i class="fas fa-history"></i>
          </div>
        </div>
      </div>
      <div class="p-6" id="recentChangesContainer">
        <div class="animate-pulse flex space-x-4">
          <div class="flex-1 space-y-6 py-1">
            <div class="h-2 bg-gray-200 rounded"></div>
            <div class="space-y-3">
              <div class="grid grid-cols-3 gap-4">
                <div class="h-2 bg-gray-200 rounded col-span-2"></div>
                <div class="h-2 bg-gray-200 rounded col-span-1"></div>
              </div>
              <div class="h-2 bg-gray-200 rounded"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
  // Store the current system state globally once we fetch it
  let currentSystemState = null;
  // Set update interval (in milliseconds)
  const updateInterval = 30000; // 30 seconds

  // Toggle learner mode
  document.getElementById('toggleLearner').addEventListener('click', function() {
    fetch('/api/learner/toggle', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        window.location.reload();
      }
    })
    .catch(error => {
      console.error('Error:', error);
    });
  });

  // Initial load of all panels
  loadAllData();
  
  // Set up periodic refresh
  setInterval(loadAllData, updateInterval);

  // Function to load all data
// Function to load all data
function loadAllData() {
  // First load current system state, then use it for all panels
  fetch('/api/learner/status')
    .then(response => response.json())
    .then(data => {
      // Store current system state for use in other panels
      currentSystemState = data.current_system_state;
      
      // Update the system state panel
      updateSystemStatePanel(currentSystemState);
      
      // Now that we have the current state, load the other panels
      loadEnergyPatternChanges();
      loadGridChargeChanges();
      loadVoltagePointChanges(); // Add this line to call the function
      loadAllRecentChanges();
    })
    .catch(error => {
      console.error('Error loading system state:', error);
      // Still try to load other panels even if system state fails
      loadEnergyPatternChanges();
      loadGridChargeChanges();
      loadVoltagePointChanges(); // Add this line here too
      loadAllRecentChanges();
    });
}

  // Function to update the system state panel
  function updateSystemStatePanel(systemState) {
    const container = document.getElementById('systemStateContainer');
    
    if (!systemState) {
      container.innerHTML = '<p class="text-gray-500 text-center py-4">System state data not available.</p>';
      return;
    }
    
    let html = `
      <div class="flex flex-col p-4 border border-gray-200 rounded-lg">
        <span class="text-sm text-gray-500 mb-1">Battery State of Charge</span>
        <div class="flex items-center">
          <i class="fas fa-battery-half text-green-500 mr-2"></i>
          <span class="text-xl font-semibold">${systemState.battery_soc || 'N/A'}%</span>
        </div>
      </div>
      
      <div class="flex flex-col p-4 border border-gray-200 rounded-lg">
        <span class="text-sm text-gray-500 mb-1">PV Power</span>
        <div class="flex items-center">
          <i class="fas fa-sun text-yellow-500 mr-2"></i>
          <span class="text-xl font-semibold">${systemState.pv_power || 'N/A'} W</span>
        </div>
      </div>
      
      <div class="flex flex-col p-4 border border-gray-200 rounded-lg">
        <span class="text-sm text-gray-500 mb-1">Load</span>
        <div class="flex items-center">
          <i class="fas fa-plug text-blue-500 mr-2"></i>
          <span class="text-xl font-semibold">${systemState.load || 'N/A'} W</span>
        </div>
      </div>
      
      <div class="flex flex-col p-4 border border-gray-200 rounded-lg">
        <span class="text-sm text-gray-500 mb-1">Grid Voltage</span>
        <div class="flex items-center">
          <i class="fas fa-bolt text-orange-500 mr-2"></i>
          <span class="text-xl font-semibold">${systemState.grid_voltage || 'N/A'} V</span>
        </div>
      </div>
      
      <div class="flex flex-col p-4 border border-gray-200 rounded-lg">
        <span class="text-sm text-gray-500 mb-1">Grid Power</span>
        <div class="flex items-center">
          <i class="fas fa-tower-broadcast text-red-500 mr-2"></i>
          <span class="text-xl font-semibold">${systemState.grid_power || 'N/A'} W</span>
        </div>
      </div>
      
      <div class="flex flex-col p-4 border border-gray-200 rounded-lg">
        <span class="text-sm text-gray-500 mb-1">Inverter State</span>
        <div class="flex items-center">
          <i class="fas fa-microchip text-purple-500 mr-2"></i>
          <span class="text-xl font-semibold">${systemState.inverter_state || 'N/A'}</span>
        </div>
      </div>
    `;
    
    container.innerHTML = html;
  }

  // Function to load energy pattern changes
  function loadEnergyPatternChanges() {
    fetch('/api/energy-pattern-changes')
      .then(response => response.json())
      .then(data => {
        const container = document.getElementById('energyPatternContainer');
        if (data.length === 0) {
          container.innerHTML = '<p class="text-gray-500 text-center py-4">No energy pattern changes recorded yet.</p>';
          return;
        }
        
        // Show latest 3 changes
        const latestChanges = data.slice(0, 3);
        let html = '';
        
        latestChanges.forEach(change => {
          // Use the current system state if the change record doesn't have it
          const systemState = (change.system_state && Object.keys(change.system_state).length > 0) 
            ? change.system_state 
            : currentSystemState;
          
          html += `
            <div class="mb-4 p-4 border border-gray-200 rounded-lg change-card relative">
              <span class="badge px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-xs font-semibold">
                ${new Date(change.timestamp).toLocaleDateString()}
              </span>
              <h3 class="font-medium text-gray-900 mb-1">${change.topic}</h3>
              <div class="flex items-center justify-between text-sm">
                <div class="text-gray-500">
                  <span class="font-medium">From:</span> ${formatValue(change.old_value)}
                </div>
                <i class="fas fa-arrow-right text-gray-400"></i>
                <div class="text-blue-600">
                  <span class="font-medium">To:</span> ${formatValue(change.new_value)}
                </div>
              </div>
              <div class="mt-2 text-xs text-gray-500">
                Battery: ${systemState?.battery_soc || currentSystemState?.battery_soc || 'N/A'}% | 
                PV: ${systemState?.pv_power || currentSystemState?.pv_power || 'N/A'}W | 
                Load: ${systemState?.load || currentSystemState?.load || 'N/A'}W
              </div>
            </div>
          `;
        });
        
        container.innerHTML = html;
      })
      .catch(error => {
        console.error('Error loading energy pattern changes:', error);
      });
  }

  // Function to load grid charge changes
  function loadGridChargeChanges() {
    fetch('/api/grid-charge-changes')
      .then(response => response.json())
      .then(data => {
        const container = document.getElementById('gridChargeContainer');
        if (data.length === 0) {
          container.innerHTML = '<p class="text-gray-500 text-center py-4">No grid charge changes recorded yet.</p>';
          return;
        }
        
        // Show latest 3 changes
        const latestChanges = data.slice(0, 3);
        let html = '';
        
        latestChanges.forEach(change => {
          // Use the current system state if the change record doesn't have it
          const systemState = (change.system_state && Object.keys(change.system_state).length > 0) 
            ? change.system_state 
            : currentSystemState;
          
          html += `
            <div class="mb-4 p-4 border border-gray-200 rounded-lg change-card relative">
              <span class="badge px-2 py-1 bg-purple-100 text-purple-800 rounded-full text-xs font-semibold">
                ${new Date(change.timestamp).toLocaleDateString()}
              </span>
              <h3 class="font-medium text-gray-900 mb-1">${change.topic}</h3>
              <div class="flex items-center justify-between text-sm">
                <div class="text-gray-500">
                  <span class="font-medium">From:</span> ${formatValue(change.old_value)}
                </div>
                <i class="fas fa-arrow-right text-gray-400"></i>
                <div class="text-purple-600">
                  <span class="font-medium">To:</span> ${formatValue(change.new_value)}
                </div>
              </div>
              <div class="mt-2 text-xs text-gray-500">
                Battery: ${systemState?.battery_soc || currentSystemState?.battery_soc || 'N/A'}% | 
                Grid: ${systemState?.grid_power || currentSystemState?.grid_power || 'N/A'}W | 
                Grid V: ${systemState?.grid_voltage || currentSystemState?.grid_voltage || 'N/A'}V
              </div>
            </div>
          `;
        });
        
        container.innerHTML = html;
      })
      .catch(error => {
        console.error('Error loading grid charge changes:', error);
      });
  }


   // Function to load voltage point changes
function loadVoltagePointChanges() {
  fetch('/api/voltage-point-changes')
    .then(response => response.json())
    .then(data => {
      const container = document.getElementById('voltagePointContainer');
      if (data.length === 0) {
        container.innerHTML = '<p class="text-gray-500 text-center py-4">No voltage point changes recorded yet.</p>';
        return;
      }
      
      // Show latest 3 changes
      const latestChanges = data.slice(0, 3);
      let html = '';
      
      latestChanges.forEach(change => {
        // Use the current system state if the change record doesn't have it
        const systemState = (change.system_state && Object.keys(change.system_state).length > 0) 
          ? change.system_state 
          : currentSystemState;
        
        html += `
          <div class="mb-4 p-4 border border-gray-200 rounded-lg change-card relative">
            <span class="badge px-2 py-1 bg-indigo-100 text-indigo-800 rounded-full text-xs font-semibold">
              ${new Date(change.timestamp).toLocaleDateString()}
            </span>
            <h3 class="font-medium text-gray-900 mb-1">${change.topic}</h3>
            <div class="flex items-center justify-between text-sm">
              <div class="text-gray-500">
                <span class="font-medium">From:</span> ${formatValue(change.old_value)}
              </div>
              <i class="fas fa-arrow-right text-gray-400"></i>
              <div class="text-indigo-600">
                <span class="font-medium">To:</span> ${formatValue(change.new_value)}
              </div>
            </div>
            <div class="mt-2 text-xs text-gray-500">
              Battery: ${systemState?.battery_soc || currentSystemState?.battery_soc || 'N/A'}% | 
              Grid V: ${systemState?.grid_voltage || currentSystemState?.grid_voltage || 'N/A'}V | 
              Load: ${systemState?.load || currentSystemState?.load || 'N/A'}W
            </div>
          </div>
        `;
      });
      
      container.innerHTML = html;
    })
    .catch(error => {
      console.error('Error loading voltage point changes:', error);
    });
}

  // Function to load all recent changes
  function loadAllRecentChanges() {
    fetch('/api/learner/changes')
      .then(response => response.json())
      .then(data => {
        const container = document.getElementById('recentChangesContainer');
        if (data.length === 0) {
          container.innerHTML = '<p class="text-gray-500 text-center py-4">No changes recorded yet.</p>';
          return;
        }
        
        // Show latest 5 changes
        const latestChanges = data.slice(0, 5);
        let html = `<div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Time</th>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Topic</th>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Change</th>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
              </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">`;
        
        latestChanges.forEach(change => {
          const changeType = change.change_type || 'unknown';
          const typeColor = 
            changeType === 'grid_charge' ? 'purple' :
            changeType === 'energy_pattern' ? 'blue' :
            'gray';
          
          html += `
            <tr id="change-${change.id}" class="hover:bg-gray-50">
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                ${formatDateTime(change.timestamp)}
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
               ${change.topic}
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                <span class="text-gray-500">${formatValue(change.old_value)}</span>
                <i class="fas fa-arrow-right mx-2 text-gray-400"></i>
                <span class="font-medium text-${typeColor}-600">${formatValue(change.new_value)}</span>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                <span class="px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-${typeColor}-100 text-${typeColor}-800">
                  ${formatChangeType(changeType)}
                </span>
              </td>
            </tr>
          `;
        });
        
        html += `
            </tbody>
          </table>
        </div>`;
        
        container.innerHTML = html;
      })
      .catch(error => {
        console.error('Error loading changes:', error);
      });
  }

  // Format functions
  function formatTopic(topic) {
    if (!topic) return 'Unknown';
    
    // Extract the relevant part after the prefix
    const parts = topic.split('/');
    return parts[parts.length - 1].replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
  }

  function formatValue(value) {
    if (value === undefined || value === null) return 'N/A';
    if (typeof value === 'object') return JSON.stringify(value);
    return value;
  }

  function formatDateTime(timestamp) {
    if (!timestamp) return 'Unknown';
    const date = new Date(timestamp);
    return date.toLocaleString();
  }

  function formatChangeType(type) {
    if (!type) return 'Other';
    return type.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
  }
});
</script>



</body>
</html>

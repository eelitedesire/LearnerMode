<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Energy System - Work Mode Settings</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        body {
            background-color: #f8f9fa;
        }
        .card {
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
            border-radius: 8px;
            border: none;
        }
        .card-header {
            background-color: #f1f8ff;
            border-bottom: 1px solid #e3f2fd;
            border-radius: 8px 8px 0 0 !important;
        }
        .change-item {
            cursor: pointer;
            padding: 15px;
            border-bottom: 1px solid #eee;
            transition: background-color 0.2s;
        }
        .change-item:hover {
            background-color: #f8f9fa;
        }
        .change-item:last-child {
            border-bottom: none;
        }
        .change-value {
            font-weight: 500;
        }
        .inverter-heading {
            background-color: #e9ecef;
            padding: 10px 15px;
            font-weight: 600;
            margin-top: 15px;
            border-radius: 5px;
        }
        .modal-header {
            background-color: #f1f8ff;
        }
        .timestamp {
            font-size: 0.85rem;
            color: #6c757d;
        }
        .setting-title {
            font-weight: 600;
            font-size: 1.1rem;
        }
        .edit-icon {
            color: #007bff;
            opacity: 0.7;
        }
        .change-item:hover .edit-icon {
            opacity: 1;
        }
        .nav-link.active {
            font-weight: bold;
            color: #007bff !important;
        }
    </style>
</head>
<body>
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary mb-4">
        <div class="container">
            <a class="navbar-brand" href="/"><i class="fas fa-solar-panel me-2"></i>Energy System Monitor</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link" href="/"><i class="fas fa-home me-1"></i>Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/grid-charge"><i class="fas fa-plug me-1"></i>Grid Charge</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/energy-pattern"><i class="fas fa-battery-three-quarters me-1"></i>Energy Pattern</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link active" href="/work-mode"><i class="fas fa-cogs me-1"></i>Work Mode</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/battery-charging"><i class="fas fa-charging-station me-1"></i>Battery Charging</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/voltage-point"><i class="fas fa-bolt me-1"></i>Voltage Points</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/rules"><i class="fas fa-tasks me-1"></i>Rules</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/learner"><i class="fas fa-brain me-1"></i>Learner</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container">
        <!-- Alerts container -->
        <div id="alerts-container"></div>

        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0"><i class="fas fa-history me-2"></i>Recent Changes</h5>
                        <div>
                            <button class="btn btn-primary" id="refresh-settings">
                                <i class="fas fa-sync-alt me-1"></i> Refresh
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle me-2"></i>
                            Click on any setting to modify its value. All inverters are displayed below.
                        </div>
                        
                        <!-- Recent changes will be loaded here -->
                        <div id="recent-changes-container">
                            <p class="text-center py-5">
                                <span class="spinner-border text-primary" role="status"></span>
                                <br>
                                <span class="mt-2 d-inline-block">Loading recent changes...</span>
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Setting Modal -->
    <div class="modal fade" id="editSettingModal" tabindex="-1" aria-labelledby="editSettingModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editSettingModalLabel">Edit Setting</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="editSettingForm">
                        <input type="hidden" id="edit-inverter">
                        <input type="hidden" id="edit-setting">
                        
                        <div class="mb-3">
                            <label class="form-label fw-bold" id="setting-name-display">Setting</label>
                            <p class="text-muted small" id="setting-inverter-display">Inverter</p>
                        </div>
                        
                        <div class="mb-3" id="value-input-container">
                            <!-- Will be dynamically populated based on setting type -->
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Current Value</label>
                            <p class="form-control-plaintext" id="current-value-display">-</p>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="save-setting-btn">Save Changes</button>
                </div>
            </div>
        </div>
    </div>

    <!-- JavaScript Libraries -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
    
    <script>
        // Global variables for settings metadata
        const settingsMetadata = {
            'work_mode': {
                display: 'Work Mode',
                type: 'select',
                options: [
                    { value: 'Battery first', label: 'Battery First' },
                    { value: 'Grid first', label: 'Grid First' },
                    { value: 'Solar first', label: 'Solar First' },
                    { value: 'Solar + Battery', label: 'Solar + Battery' },
                    { value: 'Solar + Grid', label: 'Solar + Grid' },
                    { value: 'Zero export to CT', label: 'Zero Export to CT' }
                ]
            },
            'remote_switch': {
                display: 'Remote Switch',
                type: 'select',
                options: [
                    { value: 'Enabled', label: 'Enabled' },
                    { value: 'Disabled', label: 'Disabled' }
                ]
            },
            'generator_charge': {
                display: 'Generator Charge',
                type: 'select',
                options: [
                    { value: 'Enabled', label: 'Enabled' },
                    { value: 'Disabled', label: 'Disabled' }
                ]
            },
            'force_generator_on': {
                display: 'Force Generator On',
                type: 'select',
                options: [
                    { value: 'Enabled', label: 'Enabled' },
                    { value: 'Disabled', label: 'Disabled' }
                ]
            },
            'solar_export_when_battery_full': {
                display: 'Solar Export When Battery Full',
                type: 'select',
                options: [
                    { value: 'Enabled', label: 'Enabled' },
                    { value: 'Disabled', label: 'Disabled' }
                ]
            },
            'max_sell_power': {
                display: 'Maximum Sell Power',
                type: 'number',
                min: 0,
                max: 15000,
                step: 100,
                unit: 'W'
            },
            'max_solar_power': {
                display: 'Maximum Solar Power',
                type: 'number',
                min: 0,
                max: 15000,
                step: 100,
                unit: 'W'
            },
            'grid_trickle_feed': {
                display: 'Grid Trickle Feed',
                type: 'number',
                min: 0,
                max: 100,
                step: 1,
                unit: '%'
            },
            'output_shutdown_voltage': {
                display: 'Output Shutdown Voltage',
                type: 'number',
                min: 40,
                max: 60,
                step: 0.1,
                unit: 'V'
            },
            'stop_battery_discharge_voltage': {
                display: 'Stop Battery Discharge Voltage',
                type: 'number',
                min: 40,
                max: 60,
                step: 0.1,
                unit: 'V'
            },
            'start_battery_discharge_voltage': {
                display: 'Start Battery Discharge Voltage',
                type: 'number',
                min: 40,
                max: 60,
                step: 0.1,
                unit: 'V'
            },
            'start_grid_charge_voltage': {
                display: 'Start Grid Charge Voltage',
                type: 'number',
                min: 40,
                max: 60,
                step: 0.1,
                unit: 'V'
            },
            'max_generator_charge_current': {
                display: 'Max Generator Charge Current',
                type: 'number',
                min: 0,
                max: 100,
                step: 1,
                unit: 'A'
            }
        };
        
        // Initialize the page
        $(document).ready(function() {
            // Load recent changes
            loadRecentChanges();
            
            // Set up event listeners
            setupEventListeners();
            
            // Initialize the edit modal
            initializeEditModal();
        });
        
        // Setup event listeners
        function setupEventListeners() {
            // Refresh button
            $('#refresh-settings').click(function() {
                loadRecentChanges();
                showAlert('info', 'Recent changes refreshed');
            });
            
            // Save setting button
            $('#save-setting-btn').click(function() {
                saveSetting();
            });
        }
        
        // Load recent changes
        function loadRecentChanges() {
            $.ajax({
                url: '/api/work-mode-changes',
                method: 'GET',
                success: function(response) {
                    displayRecentChanges(response);
                },
                error: function() {
                    $('#recent-changes-container').html('<div class="alert alert-warning">Unable to load recent changes</div>');
                }
            });
        }
        
        // Display recent changes grouped by inverter
        function displayRecentChanges(changes) {
            const container = $('#recent-changes-container');
            
            if (!changes || changes.length === 0) {
                container.html('<div class="alert alert-warning">No recent changes recorded</div>');
                return;
            }
            
            // Group changes by inverter
            const inverterChanges = {};
            
            changes.forEach(change => {
                // Extract inverter from topic (e.g., "inverter_1/work_mode/state")
                const topicParts = change.topic.split('/');
                let inverter = "unknown";
                
                // Find the inverter_X part in the topic
                for (const part of topicParts) {
                    if (part.startsWith('inverter_')) {
                        inverter = part;
                        break;
                    }
                }
                
                // Initialize array for this inverter if it doesn't exist
                if (!inverterChanges[inverter]) {
                    inverterChanges[inverter] = [];
                }
                
                // Add change to appropriate inverter array
                inverterChanges[inverter].push(change);
            });
            
            // Display changes grouped by inverter
            let html = '';
            
            // Get all inverter keys and sort them naturally
            const inverters = Object.keys(inverterChanges).sort((a, b) => {
                const aNum = parseInt(a.replace('inverter_', ''));
                const bNum = parseInt(b.replace('inverter_', ''));
                return aNum - bNum;
            });
            
            for (const inverter of inverters) {
                // Get changes for this inverter and sort by timestamp (newest first)
                const inverterData = inverterChanges[inverter]
                    .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
                
                // Create a lookup to eliminate duplicates (keep only most recent per setting)
                const latestSettings = {};
                
                inverterData.forEach(change => {
                    // Extract the setting name from the topic
                    const settingName = extractSettingName(change.topic);
                    
                    // Only keep the most recent change for each setting
                    if (!latestSettings[settingName] || 
                        new Date(change.timestamp) > new Date(latestSettings[settingName].timestamp)) {
                        latestSettings[settingName] = change;
                    }
                });
                
                // Format inverter name for display
                const displayName = inverter.replace('_', ' ').charAt(0).toUpperCase() + inverter.slice(1).replace('_', ' ');
                
                html += `<div class="inverter-heading">${displayName}</div>`;
                
                // Convert to array and sort by setting name for consistent display
                const settingsArray = Object.values(latestSettings)
                    .sort((a, b) => {
                        const aName = extractSettingName(a.topic);
                        const bName = extractSettingName(b.topic);
                        return aName.localeCompare(bName);
                    });
                
                settingsArray.forEach(change => {
                    const timestamp = moment(change.timestamp).format('MM/DD HH:mm');
                    const settingName = extractSettingName(change.topic);
                    const friendlyName = getSettingDisplayName(settingName);
                    
                    // Format the current value based on setting type
                    const formattedValue = formatSettingValue(settingName, change.new_value);
                    
                    html += `
                        <div class="change-item" data-inverter="${inverter}" data-setting="${settingName}" data-value="${change.new_value}">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <div class="setting-title">${friendlyName}</div>
                                    <div class="mt-1">
                                        Current: <span class="change-value text-success">${formattedValue}</span>
                                    </div>
                                </div>
                                <div class="d-flex align-items-center">
                                    <span class="timestamp me-3">${timestamp}</span>
                                    <i class="fas fa-edit edit-icon"></i>
                                </div>
                            </div>
                        </div>
                    `;
                });
            }
            
            container.html(html);
            
            // Add click event to change items
            $('.change-item').click(function() {
                const inverter = $(this).data('inverter');
                const setting = $(this).data('setting');
                const value = $(this).data('value');
                openEditModal(inverter, setting, value);
            });
        }
        
        // Extract setting name from topic
        function extractSettingName(topic) {
            // Try to extract the setting name from the topic path
            // Examples: 
            // - "inverter_1/work_mode/state" -> "work_mode"
            // - "energy/inverter_1/max_sell_power/state" -> "max_sell_power"
            
            const parts = topic.split('/');
            
            // Search for known setting names in the parts
            for (const part of parts) {
                if (settingsMetadata[part]) {
                    return part;
                }
            }
            
            // If not found, use the second to last part (before "state" or "set")
            if (parts.length >= 2) {
                const secondToLast = parts[parts.length - 2];
                return secondToLast;
            }
            
            // Fallback
            return parts[parts.length - 1];
        }
        
        // Get friendly display name for a setting
        function getSettingDisplayName(settingName) {
            if (settingsMetadata[settingName]) {
                return settingsMetadata[settingName].display;
            }
            
            // Fallback: convert snake_case to Title Case
            return settingName
                .split('_')
                .map(word => word.charAt(0).toUpperCase() + word.slice(1))
                .join(' ');
        }
        
        // Format setting value for display
        function formatSettingValue(settingName, value) {
            const metadata = settingsMetadata[settingName];
            
            if (!metadata) {
                return value;
            }
            
            if (metadata.type === 'number' && metadata.unit) {
                return `${value} ${metadata.unit}`;
            }
            
            return value;
        }
        
        // Initialize the edit modal
        function initializeEditModal() {
            // This sets up the modal but doesn't open it yet
            const editModal = new bootstrap.Modal(document.getElementById('editSettingModal'));
        }
        
        // Open the edit modal for a specific setting
        function openEditModal(inverter, setting, currentValue) {
            // Set hidden fields
            $('#edit-inverter').val(inverter);
            $('#edit-setting').val(setting);
            
            // Set display labels
            $('#setting-name-display').text(getSettingDisplayName(setting));
            $('#setting-inverter-display').text(inverter.replace('_', ' ').charAt(0).toUpperCase() + inverter.slice(1).replace('_', ' '));
            $('#current-value-display').text(formatSettingValue(setting, currentValue));
            
            // Create the appropriate input element based on setting type
            createInputElement(setting, currentValue);
            
            // Show the modal
            const editModal = new bootstrap.Modal(document.getElementById('editSettingModal'));
            editModal.show();
        }
        
        // Create the appropriate input element for a setting
        function createInputElement(setting, currentValue) {
            const container = $('#value-input-container');
            const metadata = settingsMetadata[setting] || { type: 'text' };
            
            let html = `<label for="edit-value" class="form-label">New Value</label>`;
            
            if (metadata.type === 'select') {
                html += `<select class="form-select" id="edit-value">`;
                
                if (metadata.options) {
                    metadata.options.forEach(option => {
                        const selected = option.value == currentValue ? 'selected' : '';
                        html += `<option value="${option.value}" ${selected}>${option.label}</option>`;
                    });
                } else {
                    // Default options for boolean settings
                    const enabledSelected = currentValue === 'Enabled' ? 'selected' : '';
                    const disabledSelected = currentValue === 'Disabled' ? 'selected' : '';
                    html += `
                        <option value="Enabled" ${enabledSelected}>Enabled</option>
                        <option value="Disabled" ${disabledSelected}>Disabled</option>
                    `;
                }
                
                html += `</select>`;
            } else if (metadata.type === 'number') {
                const min = metadata.min !== undefined ? `min="${metadata.min}"` : '';
                const max = metadata.max !== undefined ? `max="${metadata.max}"` : '';
                const step = metadata.step !== undefined ? `step="${metadata.step}"` : '';
                const unit = metadata.unit ? metadata.unit : '';
                
                html += `
                    <div class="input-group">
                        <input type="number" class="form-control" id="edit-value" value="${currentValue}" ${min} ${max} ${step}>
                        ${unit ? `<span class="input-group-text">${unit}</span>` : ''}
                    </div>
                `;
            } else {
                // Default to text input
                html += `<input type="text" class="form-control" id="edit-value" value="${currentValue}">`;
            }
            
            container.html(html);
        }
        
        // Save the setting
        function saveSetting() {
            const inverter = $('#edit-inverter').val();
            const setting = $('#edit-setting').val();
            const value = $('#edit-value').val();
            
            // Validate input
            if (!value) {
                showAlert('warning', 'Please enter a value', true);
                return;
            }
            
            // Send to the server
            $.ajax({
                url: '/api/work-mode/set',
                method: 'POST',
                data: {
                    inverter: inverter,
                    setting: setting,
                    value: value
                },
                success: function(response) {
                    if (response.success) {
                        // Hide the modal
                        const editModal = bootstrap.Modal.getInstance(document.getElementById('editSettingModal'));
                        editModal.hide();
                        
                        showAlert('success', `${getSettingDisplayName(setting)} updated successfully`);
                        
                        // Refresh the changes after a short delay
                        setTimeout(loadRecentChanges, 1000);
                    } else {
                        showAlert('danger', `Failed to update setting: ${response.message || 'Unknown error'}`, true);
                    }
                },
                error: function(error) {
                    showAlert('danger', `Error updating setting: ${error.responseJSON?.error || 'Server error'}`, true);
                }
            });
        }
        
        // Show alert message
        function showAlert(type, message, inModal = false) {
            const alertId = 'alert-' + Date.now();
            const alertHtml = `
                <div id="${alertId}" class="alert alert-${type} alert-dismissible fade show" role="alert">
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            `;
            
            if (inModal) {
                // Insert at the top of the modal body
                $('.modal-body').prepend(alertHtml);
            } else {
                // Insert at the top of the page
                $('#alerts-container').append(alertHtml);
            }
            
            // Auto-dismiss after 3 seconds
            setTimeout(() => {
                $(`#${alertId}`).alert('close');
            }, 3000);
        }
    </script>
</body>
</html>

<!-- views/rule-history.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rule Execution History</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <style>
        :root {
            --primary-color: #3498db;
            --secondary-color: #2ecc71;
            --warning-color: #f39c12;
            --danger-color: #e74c3c;
            --dark-color: #34495e;
            --light-color: #f8f9fa;
            --border-radius: 8px;
            --box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s ease;
        }
        
        body {
            background-color: #f5f7fa;
            color: #333;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        .container {
            max-width: 1200px;
            padding: 20px;
        }
        
        .page-header {
            margin-bottom: 30px;
            border-bottom: 1px solid #e1e5eb;
            padding-bottom: 15px;
        }
        
        .card {
            border-radius: var(--border-radius);
            border: none;
            box-shadow: var(--box-shadow);
            transition: var(--transition);
            margin-bottom: 25px;
            overflow: hidden;
        }
        
        .card:hover {
            box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1);
            transform: translateY(-3px);
        }
        
        .card-header {
            background: linear-gradient(135deg, var(--primary-color), #4a69bd);
            color: white;
            font-weight: 600;
            padding: 15px 20px;
            border: none;
        }
        
        .card-body {
            padding: 20px;
        }
        
        .database-status {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
            padding: 8px 15px;
            border-radius: 20px;
            font-weight: 500;
            font-size: 14px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }
        
        .database-status.connected {
            background-color: var(--secondary-color);
            color: white;
        }
        
        .database-status.disconnected {
            background-color: var(--danger-color);
            color: white;
        }
        
        .breadcrumb {
            background-color: transparent;
            padding: 0;
            margin-bottom: 20px;
        }
        
        .breadcrumb-item a {
            color: var(--primary-color);
            text-decoration: none;
        }
        
        .breadcrumb-item.active {
            color: var(--dark-color);
            font-weight: 500;
        }
        
        .btn {
            border-radius: 5px;
            padding: 8px 16px;
            font-weight: 500;
            transition: var(--transition);
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .btn-primary {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
        }
        
        .btn-primary:hover {
            background-color: #2980b9;
            border-color: #2980b9;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(52, 152, 219, 0.3);
        }
        
        .btn-outline-secondary {
            color: var(--dark-color);
            border-color: #bdc3c7;
        }
        
        .btn-outline-secondary:hover {
            background-color: #ecf0f1;
            color: var(--dark-color);
            border-color: #bdc3c7;
        }
        
        .table {
            border-radius: var(--border-radius);
            overflow: hidden;
            box-shadow: 0 0 10px rgba(0,0,0,0.05);
        }
        
        .table thead th {
            background-color: #f1f3f6;
            color: var(--dark-color);
            font-weight: 600;
            border-bottom: 2px solid #e1e5eb;
            text-transform: uppercase;
            font-size: 0.8rem;
            letter-spacing: 0.5px;
        }
        
        .table tbody tr {
            transition: var(--transition);
        }
        
        .table-hover tbody tr:hover {
            background-color: rgba(52, 152, 219, 0.05);
            transform: scale(1.01);
            box-shadow: 0 2px 8px rgba(0,0,0,0.08);
            z-index: 10;
            position: relative;
        }
        
        .table td {
            padding: 15px;
            vertical-align: middle;
        }
        
        .badge {
            padding: 6px 10px;
            border-radius: 20px;
            font-weight: 500;
            font-size: 12px;
        }
        
        .rule-name {
            font-weight: 600;
            color: var(--dark-color);
        }
        
        .rule-description {
            color: #7f8c8d;
            font-size: 14px;
        }
        
        .rule-date {
            font-family: 'Courier New', monospace;
            font-size: 14px;
            color: #7f8c8d;
        }
        
        .trigger-count {
            background-color: #3498db;
            color: white;
            font-weight: bold;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            margin-right: 10px;
        }
        
        .empty-state {
            text-align: center;
            padding: 40px 20px;
        }
        
        .empty-state-icon {
            font-size: 60px;
            color: #bdc3c7;
            margin-bottom: 20px;
        }
        
        .empty-state-text {
            color: #7f8c8d;
            font-size: 18px;
            margin-bottom: 20px;
        }
        
        .action-buttons {
            display: flex;
            gap: 8px;
        }
        
        .action-buttons .btn {
            padding: 6px 12px;
        }
        
        .action-buttons .btn-sm {
            font-size: 0.8rem;
        }
        
        .action-buttons .bi {
            margin-right: 5px;
        }
        
        .modal-content {
            border-radius: var(--border-radius);
            border: none;
            box-shadow: 0 15px 35px rgba(0,0,0,0.2);
        }
        
        .modal-header {
            background: linear-gradient(135deg, var(--primary-color), #4a69bd);
            color: white;
            border-bottom: none;
            padding: 15px 20px;
        }
        
        .modal-title {
            font-weight: 600;
        }
        
        .modal-body {
            padding: 20px;
        }
        
        .modal-footer {
            border-top: 1px solid #ecf0f1;
            padding: 15px 20px;
        }
        
        .filtering-controls {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
        }
        
        .status-indicator {
            display: inline-block;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 8px;
        }
        
        .status-indicator.success {
            background-color: var(--secondary-color);
        }
        
        .status-indicator.warning {
            background-color: var(--warning-color);
        }
        
        .summary-cards {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 25px;
        }
        
        .summary-card {
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
            transition: var(--transition);
        }
        
        .summary-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 15px rgba(0,0,0,0.1);
        }
        
        .summary-card-icon {
            font-size: 2.5rem;
            margin-bottom: 15px;
        }
        
        .summary-card-title {
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 1px;
            color: #7f8c8d;
            margin-bottom: 10px;
        }
        
        .summary-card-value {
            font-size: 2rem;
            font-weight: 700;
            color: var(--dark-color);
        }
        
        /* Icons for different rule types */
        .rule-type-icon {
            font-size: 1.5rem;
            margin-right: 10px;
        }
        
        .rule-type-icon.energy {
            color: #f1c40f;
        }
        
        .rule-type-icon.battery {
            color: #27ae60;
        }
        
        .rule-type-icon.grid {
            color: #9b59b6;
        }
        
        .rule-type-icon.time {
            color: #3498db;
        }
    </style>
</head>
<body>

<div class="<%= db_connected ? 'database-status connected' : 'database-status disconnected' %>">
    <i class="bi <%= db_connected ? 'bi-database-check' : 'bi-database-x' %>"></i>
    <%= db_connected ? 'Database Connected' : 'Database Disconnected' %>
</div>

<div class="container">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/"><i class="bi bi-house-door"></i> Home</a></li>
            <li class="breadcrumb-item"><a href="/rules"><i class="bi bi-list-check"></i> Rules</a></li>
            <li class="breadcrumb-item active" aria-current="page"><i class="bi bi-clock-history"></i> Rule History</li>
        </ol>
    </nav>
    
    <div class="page-header d-flex justify-content-between align-items-center">
        <h1><i class="bi bi-clock-history"></i> Rule Execution History</h1>
        <div>
            <a href="/rules" class="btn btn-outline-secondary">
                <i class="bi bi-list-check"></i> Back to Rules
            </a>
            <a href="/wizard" class="btn btn-primary">
                <i class="bi bi-plus-circle"></i> Create New Rule
            </a>
        </div>
    </div>
    
    <!-- Summary Cards -->
    <div class="summary-cards">
        <div class="summary-card">
            <div class="summary-card-icon text-primary">
                <i class="bi bi-list-check"></i>
            </div>
            <div class="summary-card-title">Total Rules</div>
            <div class="summary-card-value" id="totalRulesCount">-</div>
        </div>
        
        <div class="summary-card">
            <div class="summary-card-icon text-success">
                <i class="bi bi-lightning-charge"></i>
            </div>
            <div class="summary-card-title">Total Executions</div>
            <div class="summary-card-value" id="totalExecutionsCount">-</div>
        </div>
        
        <div class="summary-card">
            <div class="summary-card-icon text-warning">
                <i class="bi bi-calendar-check"></i>
            </div>
            <div class="summary-card-title">Last 24 Hours</div>
            <div class="summary-card-value" id="last24HoursCount">-</div>
        </div>
        
        <div class="summary-card">
            <div class="summary-card-icon text-info">
                <i class="bi bi-activity"></i>
            </div>
            <div class="summary-card-title">Most Active Rule</div>
            <div class="summary-card-value" id="mostActiveRuleName">-</div>
        </div>
    </div>
    
    <!-- Filtering Controls -->
    <div class="filtering-controls">
        <div class="input-group" style="max-width: 400px;">
            <span class="input-group-text"><i class="bi bi-search"></i></span>
            <input type="text" class="form-control" id="searchInput" placeholder="Search rules...">
            <button class="btn btn-outline-secondary" type="button" id="clearSearchBtn">Clear</button>
        </div>
        
        <div class="btn-group" role="group">
            <button type="button" class="btn btn-outline-secondary" id="filterAllBtn">All</button>
            <button type="button" class="btn btn-outline-secondary" id="filterTodayBtn">Today</button>
            <button type="button" class="btn btn-outline-secondary" id="filterWeekBtn">This Week</button>
        </div>
    </div>
    
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <span><i class="bi bi-clock-history"></i> Recent Rule Executions</span>
            <button id="refreshBtn" class="btn btn-sm btn-outline-light">
                <i class="bi bi-arrow-clockwise"></i> Refresh
            </button>
        </div>
        <div class="card-body">
            <% if (!db_connected) { %>
                <div class="alert alert-warning">
                    <i class="bi bi-exclamation-triangle-fill"></i> Database is not connected. Rule history is not available.
                </div>
            <% } else if (ruleHistory && ruleHistory.length > 0) { %>
                <div class="table-responsive">
                    <table class="table table-hover" id="historyTable">
                        <thead>
                            <tr>
                                <th>Rule</th>
                                <th>Last Triggered</th>
                                <th>Executions</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% ruleHistory.forEach(rule => { %>
                                <tr data-rule-id="<%= rule._id %>">
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <% 
                                            // Determine icon based on rule conditions
                                            let iconClass = 'rule-type-icon time';
                                            let iconType = 'bi-clock';
                                            
                                            if (rule.conditions && rule.conditions.length > 0) {
                                                const firstCondition = rule.conditions[0];
                                                if (firstCondition.parameter === 'battery_soc') {
                                                    iconClass = 'rule-type-icon battery';
                                                    iconType = 'bi-battery-charging';
                                                } else if (firstCondition.parameter === 'pv_power') {
                                                    iconClass = 'rule-type-icon energy';
                                                    iconType = 'bi-sun';
                                                } else if (firstCondition.parameter === 'grid_voltage' || 
                                                          firstCondition.parameter === 'grid_power') {
                                                    iconClass = 'rule-type-icon grid';
                                                    iconType = 'bi-lightning';
                                                }
                                            }
                                            %>
                                            <span class="<%= iconClass %>"><i class="bi <%= iconType %>"></i></span>
                                            <div>
                                                <div class="rule-name"><%= rule.name %></div>
                                                <div class="rule-description"><%= rule.description || 'No description' %></div>
                                            </div>
                                        </div>
                                    </td>
                                    <td class="rule-date">
                                        <i class="bi bi-calendar-event"></i>
                                        <%= new Date(rule.lastTriggered).toLocaleDateString() %>
                                        <br>
                                        <i class="bi bi-clock"></i>
                                        <%= new Date(rule.lastTriggered).toLocaleTimeString() %>
                                    </td>
                                    <td>
                                        <span class="trigger-count"><%= rule.triggerCount || 0 %></span>
                                        <%= rule.triggerCount === 1 ? 'time' : 'times' %>
                                    </td>
                                    <td>
                                        <div class="action-buttons">
                                            <button class="btn btn-sm btn-outline-success run-rule-btn" data-rule-id="<%= rule._id %>">
                                                <i class="bi bi-play-fill"></i> Run Now
                                            </button>
                                            <a href="/wizard?edit=<%= rule._id %>" class="btn btn-sm btn-outline-primary">
                                                <i class="bi bi-pencil"></i> Edit
                                            </a>
                                            <button class="btn btn-sm btn-outline-secondary rule-details-btn" data-rule-id="<%= rule._id %>">
                                                <i class="bi bi-info-circle"></i> Details
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            <% }); %>
                        </tbody>
                    </table>
                </div>
            <% } else { %>
                <div class="empty-state">
                    <div class="empty-state-icon">
                        <i class="bi bi-clock-history"></i>
                    </div>
                    <div class="empty-state-text">
                        No rules have been executed yet.
                    </div>
                    <a href="/wizard" class="btn btn-primary">
                        <i class="bi bi-plus-circle"></i> Create Your First Rule
                    </a>
                </div>
            <% } %>
        </div>
    </div>
</div>

<!-- Rule Details Modal -->
<div class="modal fade" id="ruleDetailsModal" tabindex="-1" aria-labelledby="ruleDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="ruleDetailsModalLabel">Rule Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6">
                        <h6><i class="bi bi-lightning"></i> Conditions</h6>
                        <div id="ruleConditions" class="mb-3 p-3 bg-light rounded">
                            <!-- Conditions will be loaded here -->
                        </div>
                        
                        <h6><i class="bi bi-clock"></i> Time Restrictions</h6>
                        <div id="ruleTimeRestrictions" class="mb-3 p-3 bg-light rounded">
                            <!-- Time restrictions will be loaded here -->
                        </div>
                    </div>
                    <div class="col-md-6">
                        <h6><i class="bi bi-gear"></i> Actions</h6>
                        <div id="ruleActions" class="mb-3 p-3 bg-light rounded">
                            <!-- Actions will be loaded here -->
                        </div>
                        
                        <h6><i class="bi bi-clock-history"></i> Execution History</h6>
                        <div id="ruleExecutionHistory" class="p-3 bg-light rounded">
                            <!-- Execution history will be loaded here -->
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="editRuleBtn">Edit Rule</button>
            </div>
        </div>
    </div>
</div>

<!-- Run Rule Confirmation Modal -->
<div class="modal fade" id="runRuleModal" tabindex="-1" aria-labelledby="runRuleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="runRuleModalLabel">Confirm Execution</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to execute the rule "<span id="runRuleName"></span>" now?</p>
                <p>This will trigger the rule's actions regardless of its conditions.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success" id="confirmRunRule">Execute Now</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Initialize modals
    const ruleDetailsModal = new bootstrap.Modal(document.getElementById('ruleDetailsModal'));
    const runRuleModal = new bootstrap.Modal(document.getElementById('runRuleModal'));
    
    let currentRuleId = null;
    let allRules = [];
    let filteredRules = [];
    
    // Fetch summary data
    fetchSummaryData();
    
    // Setup event listeners
    document.querySelectorAll('.rule-details-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const ruleId = this.getAttribute('data-rule-id');
            showRuleDetails(ruleId);
        });
    });
    
    document.querySelectorAll('.run-rule-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const ruleId = this.getAttribute('data-rule-id');
            showRunRuleConfirmation(ruleId);
        });
    });
    
    document.getElementById('confirmRunRule').addEventListener('click', function() {
        if (currentRuleId) {
            executeRule(currentRuleId);
        }
    });
    
    document.getElementById('editRuleBtn').addEventListener('click', function() {
        if (currentRuleId) {
            window.location.href = `/wizard?edit=${currentRuleId}`;
        }
    });
    
    document.getElementById('refreshBtn').addEventListener('click', function() {
        location.reload();
    });
    
    document.getElementById('searchInput').addEventListener('input', function() {
        filterRules();
    });
    
    document.getElementById('clearSearchBtn').addEventListener('click', function() {
        document.getElementById('searchInput').value = '';
        filterRules();
    });
    
    document.getElementById('filterAllBtn').addEventListener('click', function() {
        setActiveFilterButton(this);
        filterRulesByTimeRange('all');
    });
    
    document.getElementById('filterTodayBtn').addEventListener('click', function() {
        setActiveFilterButton(this);
        filterRulesByTimeRange('today');
    });
    
    document.getElementById('filterWeekBtn').addEventListener('click', function() {
        setActiveFilterButton(this);
        filterRulesByTimeRange('week');
    });
    
    // Fetch all rules for filtering
    fetchAllRules();
    
    // Function to show rule details
    function showRuleDetails(ruleId) {
        currentRuleId = ruleId;
        
        fetch(`/api/rules/${ruleId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(rule => {
                // Set modal title
                document.getElementById('ruleDetailsModalLabel').textContent = rule.name;
                
                // Populate conditions
                const conditionsContainer = document.getElementById('ruleConditions');
                if (rule.conditions && rule.conditions.length > 0) {
                    let conditionsHtml = '';
                    rule.conditions.forEach((condition, index) => {
                        const paramName = getParameterName(condition.parameter);
                        const operatorSymbol = getOperatorSymbol(condition.operator);
                        const unit = getParameterUnit(condition.parameter);
                        
                        conditionsHtml += `<div class="mb-2">
                            <span class="badge bg-secondary">${index + 1}</span> 
                            ${index === 0 ? 'If' : 'AND'} ${paramName} ${operatorSymbol} ${condition.value}${unit}
                        </div>`;
                    });
                    conditionsContainer.innerHTML = conditionsHtml;
                } else {
                    conditionsContainer.innerHTML = '<div class="text-muted">No conditions (always executes)</div>';
                }
                
                // Populate time restrictions
                const timeRestrictionsContainer = document.getElementById('ruleTimeRestrictions');
                if (rule.timeRestrictions && rule.timeRestrictions.enabled) {
                    let timeHtml = '';
                    
                    // Days
                    if (rule.timeRestrictions.days && rule.timeRestrictions.days.length > 0) {
                        const days = rule.timeRestrictions.days.map(day => 
                            day.charAt(0).toUpperCase() + day.slice(1)
                        ).join(', ');
                        
                        timeHtml += `<div class="mb-2"><strong>Days:</strong> ${days}</div>`;
                    }
                    
                    // Time range
                    if (rule.timeRestrictions.startTime && rule.timeRestrictions.endTime) {
                        timeHtml += `<div class="mb-2"><strong>Time:</strong> ${rule.timeRestrictions.startTime} to ${rule.timeRestrictions.endTime}</div>`;
                    }
                    
                    // Specific dates
                    if (rule.timeRestrictions.specificDates && rule.timeRestrictions.specificDates.length > 0) {
                        timeHtml += `<div class="mb-2"><strong>Specific dates:</strong> ${rule.timeRestrictions.specificDates.join(', ')}</div>`;
                    }
                    
                    timeRestrictionsContainer.innerHTML = timeHtml;
                } else {
                    timeRestrictionsContainer.innerHTML = '<div class="text-muted">No time restrictions</div>';
                }
                
                // Populate actions
                const actionsContainer = document.getElementById('ruleActions');
                if (rule.actions && rule.actions.length > 0) {
                    let actionsHtml = '';
                    rule.actions.forEach((action, index) => {
                        const settingName = getSettingName(action.setting);
                        let value = action.value;
                        
                        // Add units if needed
                        if (['max_discharge_current', 'max_charge_current', 'max_grid_charge_current'].includes(action.setting)) {
                            value += ' A';
                        } else if (action.setting === 'max_sell_power') {
                            value += ' W';
                        }
                        
                        const inverter = action.inverter === 'all' ? 'All Inverters' : action.inverter.replace('_', ' ');
                        
                        actionsHtml += `<div class="mb-2">
                            <span class="badge bg-primary">${index + 1}</span> 
                            Set ${settingName} to <strong>${value}</strong> on ${inverter}
                        </div>`;
                    });
                    actionsContainer.innerHTML = actionsHtml;
                } else {
                    actionsContainer.innerHTML = '<div class="text-muted">No actions defined</div>';
                }
                
                // Populate execution history
                const executionHistoryContainer = document.getElementById('ruleExecutionHistory');
                if (rule.lastTriggered) {
                    const lastTriggered = new Date(rule.lastTriggered);
                    executionHistoryContainer.innerHTML = `
                        <div><strong>Last executed:</strong> ${lastTriggered.toLocaleString()}</div>
                        <div><strong>Total executions:</strong> ${rule.triggerCount || 0}</div>
                    `;
                } else {
                    executionHistoryContainer.innerHTML = '<div class="text-muted">Never executed</div>';
                }
                
                // Show the modal
                ruleDetailsModal.show();
            })
            .catch(error => {
                console.error('Error loading rule details:', error);
                alert('Error loading rule details: ' + error.message);
            });
    }
    
    // Function to show run rule confirmation
    function showRunRuleConfirmation(ruleId) {
        currentRuleId = ruleId;
        
        // Find the rule name from the table
        const ruleRow = document.querySelector(`tr[data-rule-id="${ruleId}"]`);
        if (ruleRow) {
            const ruleName = ruleRow.querySelector('.rule-name').textContent;
            document.getElementById('runRuleName').textContent = ruleName;
        }
        
        // Show the modal
        runRuleModal.show();
    }
    
    // Function to execute a rule
    function executeRule(ruleId) {
        fetch(`/api/rules/${ruleId}/execute`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            }
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            // Close the modal
            runRuleModal.hide();
            
            // Show a success message
            alert(`Rule executed successfully!`);
            
            // Reload the page to refresh the data
            location.reload();
        })
        .catch(error => {
            console.error('Error executing rule:', error);
            alert('Error executing rule: ' + error.message);
            runRuleModal.hide();
        });
    }
    
    // Function to fetch summary data
    function fetchSummaryData() {
        fetch('/api/rules/history?limit=100')
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                if (data && data.length > 0) {
                    // Calculate summary statistics
                    const totalExecutions = data.reduce((sum, rule) => sum + (rule.triggerCount || 0), 0);
                    
                    // Find most active rule
                    let mostActiveRule = data[0];
                    for (const rule of data) {
                        if ((rule.triggerCount || 0) > (mostActiveRule.triggerCount || 0)) {
                            mostActiveRule = rule;
                        }
                    }
                    
                    // Count executions in the last 24 hours
                    const oneDayAgo = new Date();
                    oneDayAgo.setDate(oneDayAgo.getDate() - 1);
                    
                    const last24HoursCount = data.filter(rule => 
                        new Date(rule.lastTriggered) >= oneDayAgo
                    ).length;
                    
                    // Update the summary cards
                    document.getElementById('totalRulesCount').textContent = data.length;
                    document.getElementById('totalExecutionsCount').textContent = totalExecutions;
                    document.getElementById('last24HoursCount').textContent = last24HoursCount;
                    document.getElementById('mostActiveRuleName').textContent = 
                        mostActiveRule.triggerCount ? mostActiveRule.name : 'None';
                }
            })
            .catch(error => {
                console.error('Error fetching summary data:', error);
                // Just leave the placeholder values if there's an error
            });
    }
    
    // Function to fetch all rules
    function fetchAllRules() {
        fetch('/api/rules')
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                allRules = data;
                filteredRules = [...allRules];
            })
            .catch(error => {
                console.error('Error fetching all rules:', error);
            });
    }
    
    // Function to filter rules based on search term
    function filterRules() {
        const searchTerm = document.getElementById('searchInput').value.toLowerCase();
        
        if (!searchTerm) {
            // If no search term, show all rows
            document.querySelectorAll('#historyTable tbody tr').forEach(row => {
                row.style.display = '';
            });
            return;
        }
        
        // Filter rows based on search term
        document.querySelectorAll('#historyTable tbody tr').forEach(row => {
            const ruleName = row.querySelector('.rule-name').textContent.toLowerCase();
            const ruleDescription = row.querySelector('.rule-description').textContent.toLowerCase();
            
            if (ruleName.includes(searchTerm) || ruleDescription.includes(searchTerm)) {
                row.style.display = '';
            } else {
                row.style.display = 'none';
            }
        });
    }
    
    // Function to filter rules based on time range
    function filterRulesByTimeRange(range) {
        // Define date thresholds
        const now = new Date();
        const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
        const oneWeekAgo = new Date(now);
        oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
        
        // Reset search input
        document.getElementById('searchInput').value = '';
        
        // Filter rows based on time range
        document.querySelectorAll('#historyTable tbody tr').forEach(row => {
            const ruleDate = new Date(row.querySelector('.rule-date').textContent);
            
            if (range === 'all') {
                row.style.display = '';
            } else if (range === 'today') {
                row.style.display = ruleDate >= today ? '' : 'none';
            } else if (range === 'week') {
                row.style.display = ruleDate >= oneWeekAgo ? '' : 'none';
            }
        });
    }
    
    // Function to set active filter button
    function setActiveFilterButton(button) {
        document.querySelectorAll('.btn-group .btn').forEach(btn => {
            btn.classList.remove('btn-primary');
            btn.classList.add('btn-outline-secondary');
        });
        
        button.classList.remove('btn-outline-secondary');
        button.classList.add('btn-primary');
    }

    function fetchSummaryData() {
    // Show loading indicators
    document.getElementById('totalRulesCount').textContent = 'Loading...';
    document.getElementById('totalExecutionsCount').textContent = 'Loading...';
    document.getElementById('last24HoursCount').textContent = 'Loading...';
    document.getElementById('mostActiveRuleName').textContent = 'Loading...';
    
    // Fetch the statistics data
    fetch('/api/rules/statistics')
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            console.log('Statistics data:', data);
            
            // Update the summary cards with the retrieved data
            document.getElementById('totalRulesCount').textContent = data.totalRules;
            document.getElementById('totalExecutionsCount').textContent = data.totalExecutions;
            document.getElementById('last24HoursCount').textContent = data.last24Hours;
            document.getElementById('mostActiveRuleName').textContent = data.mostActiveRule;
        })
        .catch(error => {
            console.error('Error fetching statistics:', error);
            
            // Show error message in the cards
            document.getElementById('totalRulesCount').textContent = 'Error';
            document.getElementById('totalExecutionsCount').textContent = 'Error';
            document.getElementById('last24HoursCount').textContent = 'Error';
            document.getElementById('mostActiveRuleName').textContent = 'Error';
        });
}
    
    // Helper functions for formatting
    function getParameterName(parameter) {
        const names = {
            'battery_soc': 'Battery SOC',
            'pv_power': 'PV Power',
            'load': 'Load Power',
            'grid_voltage': 'Grid Voltage',
            'grid_power': 'Grid Power',
            'battery_voltage': 'Battery Voltage',
            'battery_current': 'Battery Current'
        };
        return names[parameter] || parameter;
    }
    
    function getOperatorSymbol(operator) {
        const symbols = {
            'gt': '>',
            'lt': '<',
            'eq': '=',
            'gte': '≥',
            'lte': '≤'
        };
        return symbols[operator] || operator;
    }
    
    function getParameterUnit(parameter) {
        const units = {
            'battery_soc': '%',
            'pv_power': 'W',
            'load': 'W',
            'grid_voltage': 'V',
            'grid_power': 'W',
            'battery_voltage': 'V',
            'battery_current': 'A'
        };
        return units[parameter] || '';
    }
    
    function getSettingName(setting) {
        const names = {
            'grid_charge': 'Grid Charge',
            'energy_pattern': 'Energy Pattern',
            'work_mode': 'Work Mode',
            'max_discharge_current': 'Max Discharge Current',
            'max_charge_current': 'Max Charge Current',
            'max_grid_charge_current': 'Max Grid Charge Current',
            'solar_export_when_battery_full': 'Solar Export When Battery Full',
            'max_sell_power': 'Max Sell Power',
            'remote_switch': 'Remote Switch',
            'generator_charge': 'Generator Charge'
        };
        return names[setting] || setting;
    }
});
</script>
</body>
</html>
